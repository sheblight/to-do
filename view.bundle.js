(()=>{"use strict";var e,t={265:(e,t,r)=>{r.d(t,{Z:()=>n});const n=(()=>{function e(e){return document.querySelector(e)}return{query:e,queryAll:function(e){return document.querySelectorAll(e)},createSVGElement:e=>{const t=document.createElementNS("http://www.w3.org/2000/svg","svg"),r=document.createElementNS("http://www.w3.org/2000/svg","path");return r.setAttribute("d",e.path),t.setAttribute("viewbox","0 0 24 24"),t.appendChild(r),t},setVisible:(t,r=!0)=>{const n=(t=>"string"==typeof t?e(t):t)(t).classList;r?n.remove("hidden"):n.add("hidden")},moveDown:t=>{const r=e(t);r.parentNode.appendChild(r)},setClick:function(t,r){e(t).addEventListener("click",r)},addEntryOfTemplate:function(t,r){const n=e(t).cloneNode(!0),o=e(r);return n.classList.remove("hidden"),o.appendChild(n),n},addTemporaryInput:function(t,r,n=""){const o=document.createElement("input"),a=e(t),s=e(r);if(a||s)return o.style+=n,a.classList.add("hidden"),s.appendChild(o),o.select(),console.log("Swapped out input."),o;console.log("Failed to find element or container")},swapInputWithText:function(t,r,n=!1){const o=e(r);return o.textContent=t.value,o.classList.remove("hidden"),n&&t.remove(),o},elementExists:t=>null!=e(t)}})()}},r={};function n(e){var o=r[e];if(void 0!==o)return o.exports;var a=r[e]={exports:{}};return t[e](a,a.exports,n),a.exports}n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(e=n(265)).Z.query(".task-list"),e.Z.query("nav ul.tag-list"),e.Z.query(".tag-modal-wrapper"),e.Z.query(".task-creation"),e.Z.query(".tag-group ul"),e.Z.query(".task-modal-wrapper"),e.Z.query(".task-modal"),e.Z.query(".task-modal-wrapper .checked"),e.Z.query(".task-modal-wrapper .title"),e.Z.query(".task-modal-wrapper .description"),e.Z.query(".task-modal-wrapper .tags"),e.Z.query(".task-modal-wrapper .deadline"),e.Z.query(".task-modal-wrapper .priority")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,