(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>d});var a=t(537),o=t.n(a),r=t(645),i=t.n(r)()(o());i.push([n.id,":root {\n    --body-color: #526368;\n    --sub-color: #1e2f39;\n    --light-sub-color: #405258;\n    --accent-color: #968a7d;\n    --dark-accent-color: #806742;\n    --text-color: #e4e1cf;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\n.hidden {\n    display: none !important;\n}\n\nbody {\n    display: grid;\n    grid-template-columns: 15rem 1fr;\n    grid-template-rows: 3.5rem calc(100vh - 3.5rem);\n    background-color: var(--body-color);\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\nli {\n    display: flex;\n    list-style: none;\n}\n\n/* preceding icon classes */\n.icon {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\nsvg {\n    width: 2em;\n    height: 2em;\n}\n\n.tag svg {\n    width: 1em;\n    height: 1em;\n}\n\n/* header */\nheader {\n    grid-area: 1/1/1/3;\n    background-color: var(--sub-color);\n}\n\n/* side menu*/\nnav {\n    display: grid;\n    grid-template-columns: auto;\n    grid-template-rows: 2rem auto 3rem 3rem 1fr 5rem;\n    padding-left: 2rem;\n    background-color: var(--light-sub-color);\n}\n\nnav .icon {\n    border: none;\n    background-color: transparent;\n    font-size: 1rem;\n    font-weight: bold;\n    color: var(--text-color);\n    fill: var(--text-color);\n}\n\n.menu-time-options li {\n    padding: 0;\n}\n\nnav input {\n    padding: 0.5rem;\n    width: 60%;  \n    color:var(--text-color)\n}\n\nnav .tag p {\n    width: 60%;\n}\n\n.tag-list li {\n    padding: 0.5em 0 0.5em 2em;\n}\n\n/* main content */\nmain {\n    padding: 2rem 4rem;\n    overflow: auto;\n}\n\ninput {\n    border: none;\n    background-color: transparent;\n}\n\n.task-list-head {\n    display:flex;\n    align-items: center;\n}\n\n.divider {\n    border: 2px solid var(--accent-color);\n    width: 100%;\n    height: 0;\n    margin-left: 1rem;\n}\n\n.task-creation {\n    display: grid;\n    grid-template-columns: 10rem 8rem 7rem auto 6rem 6rem;\n    grid-template-rows: 3rem 3rem 3rem;\n    border: 3px solid var(--sub-color);\n    border-radius: 6px;\n    background-color: rgb(11 22 33 / 44%);\n    \n}\n\n.task-creation input::placeholder {\n    color: var(--text-color);\n}\n\n.task-creation select, .task-creation input[type=date], .task-creation .tag-group {\n    margin: 6px;\n    padding: 0;\n    cursor: pointer;\n    border: 2px solid var(--text-color);\n    border-radius: 6px;\n    background-color: rgb(92 105 107 / 51%);\n    color: var(--text-color);\n}\n\n.task-creation p, .task-creation li {\n    padding: 0.5rem;\n    font-size: 0.9rem;\n}\n\n.task-creation li {\n    background-color: #1e2f39;\n}\n\n.task-creation input[type=checkbox] {\n    margin-right: 0.5rem;\n}\n\n.task-creation option {\n    background-color: var(--sub-color);\n    color: var(--text-color);\n}\n\n.task-creation button {\n    margin: 6px;\n    border: none;\n    border-radius: 6px;\n}\n\n.task-entry {\n    display: grid;\n    grid-template-columns: 2rem auto;\n    grid-template-rows: auto;\n    color: var(--text-color);\n}\n\n.task-entry button {\n    grid-area: 1/1/3/1;\n    border: none;\n    fill: var(--sub-color);\n    background-color: transparent;\n}\n\n.tag-group {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.5rem;\n    padding: 1rem 0 0 0;\n}\n\nmain .icon {\n    border: none;\n    background-color: transparent;\n    font-size: 1rem;\n    font-weight: bold;\n    color: var(--text-color);\n    fill: var(--text-color);\n}\n\n\n/* task modal */\n.task-modal-wrapper, .tag-modal-wrapper {\n    position:fixed;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgba(0,0,0,0.3);\n}\n\n.task-modal, .tag-modal {\n    position: inherit;\n    --modal-width: 300px;\n    --modal-height: 300px;\n    width: var(--modal-width);\n    height: var(--modal-height);\n    bottom: calc(50% - var(--modal-height)/2);\n    right: calc(50% - var(--modal-width)/2);\n    background-color: var(--accent-color);\n    padding: 3rem;\n}\n\n.close {\n    position: absolute;\n    right: 0.5rem;\n    top: 0.5rem;\n    background-color: transparent;\n    border: none;\n    padding: 0;\n}\n\n.task-modal input, .task-modal textarea {\n    background-color: transparent;\n}\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,qBAAqB;IACrB,oBAAoB;IACpB,0BAA0B;IAC1B,uBAAuB;IACvB,4BAA4B;IAC5B,qBAAqB;AACzB;;AAEA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,gCAAgC;IAChC,+CAA+C;IAC/C,mCAAmC;IACnC,4DAA4D;AAChE;;AAEA;IACI,aAAa;IACb,gBAAgB;AACpB;;AAEA,2BAA2B;AAC3B;IACI,aAAa;IACb,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,UAAU;IACV,WAAW;AACf;;AAEA;IACI,UAAU;IACV,WAAW;AACf;;AAEA,WAAW;AACX;IACI,kBAAkB;IAClB,kCAAkC;AACtC;;AAEA,aAAa;AACb;IACI,aAAa;IACb,2BAA2B;IAC3B,gDAAgD;IAChD,kBAAkB;IAClB,wCAAwC;AAC5C;;AAEA;IACI,YAAY;IACZ,6BAA6B;IAC7B,eAAe;IACf,iBAAiB;IACjB,wBAAwB;IACxB,uBAAuB;AAC3B;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,eAAe;IACf,UAAU;IACV;AACJ;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,0BAA0B;AAC9B;;AAEA,iBAAiB;AACjB;IACI,kBAAkB;IAClB,cAAc;AAClB;;AAEA;IACI,YAAY;IACZ,6BAA6B;AACjC;;AAEA;IACI,YAAY;IACZ,mBAAmB;AACvB;;AAEA;IACI,qCAAqC;IACrC,WAAW;IACX,SAAS;IACT,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,qDAAqD;IACrD,kCAAkC;IAClC,kCAAkC;IAClC,kBAAkB;IAClB,qCAAqC;;AAEzC;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,WAAW;IACX,UAAU;IACV,eAAe;IACf,mCAAmC;IACnC,kBAAkB;IAClB,uCAAuC;IACvC,wBAAwB;AAC5B;;AAEA;IACI,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,oBAAoB;AACxB;;AAEA;IACI,kCAAkC;IAClC,wBAAwB;AAC5B;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,gCAAgC;IAChC,wBAAwB;IACxB,wBAAwB;AAC5B;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,sBAAsB;IACtB,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,eAAe;IACf,WAAW;IACX,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,6BAA6B;IAC7B,eAAe;IACf,iBAAiB;IACjB,wBAAwB;IACxB,uBAAuB;AAC3B;;;AAGA,eAAe;AACf;IACI,cAAc;IACd,YAAY;IACZ,aAAa;IACb,iCAAiC;AACrC;;AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,qBAAqB;IACrB,yBAAyB;IACzB,2BAA2B;IAC3B,yCAAyC;IACzC,uCAAuC;IACvC,qCAAqC;IACrC,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,WAAW;IACX,6BAA6B;IAC7B,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,6BAA6B;AACjC",sourcesContent:[":root {\n    --body-color: #526368;\n    --sub-color: #1e2f39;\n    --light-sub-color: #405258;\n    --accent-color: #968a7d;\n    --dark-accent-color: #806742;\n    --text-color: #e4e1cf;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\n.hidden {\n    display: none !important;\n}\n\nbody {\n    display: grid;\n    grid-template-columns: 15rem 1fr;\n    grid-template-rows: 3.5rem calc(100vh - 3.5rem);\n    background-color: var(--body-color);\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\nli {\n    display: flex;\n    list-style: none;\n}\n\n/* preceding icon classes */\n.icon {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\nsvg {\n    width: 2em;\n    height: 2em;\n}\n\n.tag svg {\n    width: 1em;\n    height: 1em;\n}\n\n/* header */\nheader {\n    grid-area: 1/1/1/3;\n    background-color: var(--sub-color);\n}\n\n/* side menu*/\nnav {\n    display: grid;\n    grid-template-columns: auto;\n    grid-template-rows: 2rem auto 3rem 3rem 1fr 5rem;\n    padding-left: 2rem;\n    background-color: var(--light-sub-color);\n}\n\nnav .icon {\n    border: none;\n    background-color: transparent;\n    font-size: 1rem;\n    font-weight: bold;\n    color: var(--text-color);\n    fill: var(--text-color);\n}\n\n.menu-time-options li {\n    padding: 0;\n}\n\nnav input {\n    padding: 0.5rem;\n    width: 60%;  \n    color:var(--text-color)\n}\n\nnav .tag p {\n    width: 60%;\n}\n\n.tag-list li {\n    padding: 0.5em 0 0.5em 2em;\n}\n\n/* main content */\nmain {\n    padding: 2rem 4rem;\n    overflow: auto;\n}\n\ninput {\n    border: none;\n    background-color: transparent;\n}\n\n.task-list-head {\n    display:flex;\n    align-items: center;\n}\n\n.divider {\n    border: 2px solid var(--accent-color);\n    width: 100%;\n    height: 0;\n    margin-left: 1rem;\n}\n\n.task-creation {\n    display: grid;\n    grid-template-columns: 10rem 8rem 7rem auto 6rem 6rem;\n    grid-template-rows: 3rem 3rem 3rem;\n    border: 3px solid var(--sub-color);\n    border-radius: 6px;\n    background-color: rgb(11 22 33 / 44%);\n    \n}\n\n.task-creation input::placeholder {\n    color: var(--text-color);\n}\n\n.task-creation select, .task-creation input[type=date], .task-creation .tag-group {\n    margin: 6px;\n    padding: 0;\n    cursor: pointer;\n    border: 2px solid var(--text-color);\n    border-radius: 6px;\n    background-color: rgb(92 105 107 / 51%);\n    color: var(--text-color);\n}\n\n.task-creation p, .task-creation li {\n    padding: 0.5rem;\n    font-size: 0.9rem;\n}\n\n.task-creation li {\n    background-color: #1e2f39;\n}\n\n.task-creation input[type=checkbox] {\n    margin-right: 0.5rem;\n}\n\n.task-creation option {\n    background-color: var(--sub-color);\n    color: var(--text-color);\n}\n\n.task-creation button {\n    margin: 6px;\n    border: none;\n    border-radius: 6px;\n}\n\n.task-entry {\n    display: grid;\n    grid-template-columns: 2rem auto;\n    grid-template-rows: auto;\n    color: var(--text-color);\n}\n\n.task-entry button {\n    grid-area: 1/1/3/1;\n    border: none;\n    fill: var(--sub-color);\n    background-color: transparent;\n}\n\n.tag-group {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.5rem;\n    padding: 1rem 0 0 0;\n}\n\nmain .icon {\n    border: none;\n    background-color: transparent;\n    font-size: 1rem;\n    font-weight: bold;\n    color: var(--text-color);\n    fill: var(--text-color);\n}\n\n\n/* task modal */\n.task-modal-wrapper, .tag-modal-wrapper {\n    position:fixed;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgba(0,0,0,0.3);\n}\n\n.task-modal, .tag-modal {\n    position: inherit;\n    --modal-width: 300px;\n    --modal-height: 300px;\n    width: var(--modal-width);\n    height: var(--modal-height);\n    bottom: calc(50% - var(--modal-height)/2);\n    right: calc(50% - var(--modal-width)/2);\n    background-color: var(--accent-color);\n    padding: 3rem;\n}\n\n.close {\n    position: absolute;\n    right: 0.5rem;\n    top: 0.5rem;\n    background-color: transparent;\n    border: none;\n    padding: 0;\n}\n\n.task-modal input, .task-modal textarea {\n    background-color: transparent;\n}\n\n"],sourceRoot:""}]);const d=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",a=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),a&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),a&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,a,o,r){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(a)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(i[s]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);a&&i[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),e.push(c))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(o," */");return[e].concat([r]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,a=0;a<e.length;a++)if(e[a].identifier===n){t=a;break}return t}function a(n,a){for(var r={},i=[],d=0;d<n.length;d++){var s=n[d],l=a.base?s[0]+a.base:s[0],c=r[l]||0,A="".concat(l," ").concat(c);r[l]=c+1;var p=t(A),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(m);else{var g=o(m,a);a.byIndex=d,e.splice(d,0,{identifier:A,updater:g,references:1})}i.push(A)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var r=a(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<r.length;i++){var d=t(r[i]);e[d].references--}for(var s=a(n,o),l=0;l<r.length;l++){var c=t(r[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}r=s}}},569:n=>{var e={};n.exports=function(n,t){var a=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,o&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(a,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},265:(n,e,t)=>{t.d(e,{Z:()=>a});const a=(()=>{function n(n){return document.querySelector(n)}return{query:n,queryAll:function(n){return document.querySelectorAll(n)},createSVGElement:n=>{const e=document.createElementNS("http://www.w3.org/2000/svg","svg"),t=document.createElementNS("http://www.w3.org/2000/svg","path");return t.setAttribute("d",n.path),e.setAttribute("viewbox","0 0 24 24"),e.appendChild(t),e},setVisible:(e,t=!0)=>{const a=(e=>"string"==typeof e?n(e):e)(e).classList;t?a.remove("hidden"):a.add("hidden")},moveDown:e=>{const t=n(e);t.parentNode.appendChild(t)},setClick:function(e,t){n(e).addEventListener("click",t)},addEntryOfTemplate:function(e,t){const a=n(e).cloneNode(!0),o=n(t);return a.classList.remove("hidden"),o.appendChild(a),a},addTemporaryInput:function(e,t,a=""){const o=document.createElement("input"),r=n(e),i=n(t);if(r||i)return o.style+=a,r.classList.add("hidden"),i.appendChild(o),o.select(),console.log("Swapped out input."),o;console.log("Failed to find element or container")},swapInputWithText:function(e,t,a=!1){const o=n(t);return o.textContent=e.value,o.classList.remove("hidden"),a&&e.remove(),o},elementExists:e=>null!=n(e)}})()},85:(n,e,t)=>{t.d(e,{Z:()=>a});const a={save:n=>{"object"==typeof n?(window.localStorage.setItem("data",JSON.stringify(n)),console.log("Saved data.")):console.warn("Cannot save data because target data isn't an Object")},clear:()=>{window.localStorage.clear(),console.log("Cleared local data.")},hasExistingData:function(){return window.localStorage.data||!1},getDataCopy:function(){return JSON.parse(window.localStorage.data)||null}}},214:(n,e,t)=>{t.d(e,{Z:()=>o});var a=t(85);const o=function(){var n={version:"0.2.0",user:"Guest",tasks:[{id:0,checked:!1,title:"Add New Task",description:'Pressing "Add Task" at the bottom adds a new task.',deadline:"",priority:"None",tags:[{name:"Work",color:"#000000"}]},{id:1,checked:!1,title:"Add New Tag",description:'Pressing "Add Tag" on the side menu lets you add a new tag.',deadline:"",priority:"None",tags:[{name:"Work",color:"#000000"}]}],tags:[{name:"Work",color:"#000000"},{name:"Hobby",color:"#000000"},{name:"Shopping",color:"#000000"}],tagColors:["#dd4242","#7abb46","#3d95e2"]};let e;const t=()=>JSON.parse(JSON.stringify(e)),o=()=>a.Z.save(e);return{loadUserData:()=>{return console.log("Retrieving user data"),a.Z.hasExistingData()?((r=a.Z.getDataCopy()).version==n.version?(console.log(`Using most updated version ${n.version}`),e=r):"1"==n.version[0]?(e=r,e.version=n.version,console.log(`Updated to latest version ${n.version}`)):(e=JSON.parse(JSON.stringify(n)),console.log(`Reseting data due to new update. Updated to version ${n.version}`)),o(),t()):JSON.parse(JSON.stringify(n));var r},getDataCopy:t,getTaskById:n=>t().tasks.find((e=>e.id==n)),addNewTag:n=>n.name&&n.color?(e.tags.push(n),o(),n):(console.error("Extracted invalid tag format"),null),addNewTask:n=>"number"==typeof n.id&&null!=n.checked&&"string"==typeof n.title&&"string"==typeof n.description&&"string"==typeof n.deadline&&"string"==typeof n.priority&&n.tags?(n.id=e.tasks?e.tasks[e.tasks.length-1].id+1:0,e.tasks.push(n),o(),n):(console.error("Extracted invalid task format"),null),toggleCheckOffTask:n=>{const t=e.tasks.find((e=>e.id==n)),a=e.tasks.indexOf(t);if(!(a<0))return e.tasks[a].checked=!e.tasks[a].checked,o(),e.tasks[a].checked;console.warn(`Could not find task of id ${n}`)},removeTask:n=>{const t=e.tasks.find((e=>e.id==n)),a=e.tasks.indexOf(t);a<0?console.warn(`Could not find task of id ${n}`):(e.tasks.splice(a,1),o(),console.log(`Removed task entry id ${n}`))},resetData:()=>(e=JSON.parse(JSON.stringify(n)),o(),t())}}()},513:(n,e,t)=>{t.d(e,{Z:()=>o});var a=t(265);const o=(()=>{const n=a.Z.query(".task-list"),e=a.Z.query("nav ul.tag-list"),t=a.Z.query(".tag-modal-wrapper"),o=a.Z.query(".task-creation"),r=a.Z.query(".tag-group ul"),i=a.Z.query(".task-modal-wrapper"),d={modal:a.Z.query(".task-modal"),checked:a.Z.query(".task-modal-wrapper .checked"),title:a.Z.query(".task-modal-wrapper .title"),description:a.Z.query(".task-modal-wrapper .description"),tags:a.Z.query(".task-modal-wrapper .tags"),deadline:a.Z.query(".task-modal-wrapper .deadline"),priority:a.Z.query(".task-modal-wrapper .priority")},s=n=>{const e=document.createElement("li"),t=document.createElement("div"),o=document.createElement("p"),r=a.Z.createSVGElement({path:"M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"});return t.classList.add("tag"),t.classList.add("icon"),o.textContent=n.name,t.appendChild(r),t.appendChild(o),e.appendChild(t),e},l=e=>{for(const t of n.children)if(t.dataset.id==e)return t;return null},c=(n,e)=>{a.Z.setVisible(n.children[0],!e),a.Z.setVisible(n.children[1],e)},A=(n,t)=>{const a=s(n);e.appendChild(a),a.addEventListener("click",t)},p=(e,t,o)=>{const r=(n=>{const e=document.createElement("div"),t=document.createElement("div"),o=(()=>{const n=document.createElement("button"),e=a.Z.createSVGElement({path:"M12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4A8,8 0 0,1 20,12A8,8 0 0,1 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z"}),t=a.Z.createSVGElement({path:"M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M12 20C7.59 20 4 16.41 4 12S7.59 4 12 4 20 7.59 20 12 16.41 20 12 20M16.59 7.58L10 14.17L7.41 11.59L6 13L10 17L18 9L16.59 7.58Z"});return n.classList.add("task-check"),t.classList.add("hidden"),n.appendChild(e),n.appendChild(t),n})();e.dataset.id=n.id,e.style="margin: 2rem;",e.classList.add("task-entry"),c(o,n.checked),e.appendChild(o),t.style="display: grid; grid-template-columns: auto 6rem 5rem; grid-template-rows: 3rem auto auto; align-items: center;";const r=(n,e,t,a)=>{const o=document.createElement(n);return o.classList.add(e),o.style=t,o.textContent=a,o};t.appendChild(r("p","title","grid-area: 1/1/1/1; margin-left: 1rem; font-size: 1.5rem; font-weight: 600;",n.title)),t.appendChild(r("p","description","grid-area: 2/1/2/-1; margin-left: 1rem;",n.description)),t.appendChild(r("p","deadline","grid-area: 1/2/1/2;",n.deadline)),t.appendChild(r("p","priority","grid-area: 1/3/1/3;",n.priority));const i=r("div","tag-group","grid-area: 3/1/3/-1; margin-left: 1rem;","");return n.tags.forEach((n=>{i.appendChild(s(n))})),t.appendChild(i),e.appendChild(t),e})(e);n.appendChild(r),r.childNodes[0].addEventListener("click",o),r.childNodes[1].addEventListener("click",t)};return{querySelected:n=>{const e=n.length;let t=Promise.resolve([]);for(let o=0;o<e;o++)t=t.then((e=>e.concat(a.Z.query(n[o]))));return t},addNewTag:A,addNewTask:p,removeTask:n=>{const e=l(n);e?e.remove():console.warn("Couldn't find node with matching id")},generateSideMenuTags:(n,t)=>{e.replaceChildren(),n.forEach((n=>{A(n,t(n))}))},generateHomeView:(e,t,a)=>{n.replaceChildren(),e.forEach((n=>{p(n,t(n.id),a(n))}))},extractTag:()=>{const n=document.forms.newTagForm;return{name:n.name.value,color:n.color}},extractIdOfCurrentTask:()=>d.modal.dataset.id,extractTaskFromCreation:()=>{const n={id:0,checked:!1},e=document.forms.newTaskForm;["title","description","deadline","priority"].forEach((t=>n[t]=e[t].value)),a.Z.queryAll(".task-group"),n.tags=[];for(const e of r.children)e.children[0].checked&&n.tags.push({name:e.dataset.name,color:e.dataset.color});return n},checkOffTask:(n,e)=>{const t=l(n);t?c(t.childNodes[0],e):console.warn("Couldn't find node with matching id")},loadTagsInTaskCreation:n=>{r.replaceChildren(),n.forEach((n=>{const e=document.createElement("li"),t=document.createElement("input"),a=document.createElement("p");e.classList.add("tag-item"),e.dataset.name=n.name,e.dataset.color=n.color,t.type="checkbox",t.name=n.name,a.textContent=n.name,e.appendChild(t),e.appendChild(a),r.append(e)}))},loadTaskInModal:n=>{a.Z.setVisible(d.modal,!1),d.tags.replaceChildren(),d.modal.dataset.id=n.id;for(const e in n)"id"!=e&&"tags"!=e&&"checked"!=e&&(d[e].textContent=n[e]);c(d.checked,n.checked),n.tags.forEach((n=>{d.tags.appendChild(s(n))})),a.Z.setVisible(d.modal)},toggleTaskListDropdown:()=>{a.Z.setVisible(r,r.classList.contains("hidden"))},openTagModal:()=>{a.Z.setVisible(t)},closeTagModal:()=>{a.Z.setVisible(t,!1)},openTaskCreation:()=>{a.Z.setVisible(o)},closeTaskCreation:()=>{a.Z.setVisible(o,!1)},openTaskModal:()=>{a.Z.setVisible(i)},closeTaskModal:()=>{a.Z.setVisible(i,!1)}}})()}},e={};function t(a){var o=e[a];if(void 0!==o)return o.exports;var r=e[a]={id:a,exports:{}};return n[a](r,r.exports,t),r.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var a in e)t.o(e,a)&&!t.o(n,a)&&Object.defineProperty(n,a,{enumerable:!0,get:e[a]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),a=t(795),o=t.n(a),r=t(569),i=t.n(r),d=t(565),s=t.n(d),l=t(216),c=t.n(l),A=t(589),p=t.n(A),m=t(426),g={};g.styleTagTransform=p(),g.setAttributes=s(),g.insert=i().bind(null,"head"),g.domAPI=o(),g.insertStyleElement=c(),e()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals;var u=t(214),C=t(513);const h=u.Z.loadUserData(),k=n=>()=>{},f=n=>()=>{I.openTask(u.Z.getTaskById(n))},v=n=>()=>{C.Z.checkOffTask(n.id,u.Z.toggleCheckOffTask(n.id))};C.Z.generateSideMenuTags(h.tags,k),C.Z.generateHomeView(h.tasks,f,v);const I={goToHome:()=>{C.Z.generateHomeView(u.Z.getDataCopy().tasks,f,v),console.log("Load home view.")},addTag:()=>{C.Z.openTagModal()},closeTagModal:()=>{C.Z.closeTagModal()},submitTag:()=>{const n=u.Z.addNewTag(C.Z.extractTag());C.Z.addNewTag(n,(()=>{})),C.Z.closeTagModal()},clearAll:function(){Promise.resolve(u.Z.resetData()).then((n=>{C.Z.generateSideMenuTags(n.tags,k),C.Z.generateHomeView(n.tasks,f,v)}))},newTask:()=>{C.Z.loadTagsInTaskCreation(u.Z.getDataCopy().tags),C.Z.openTaskCreation()},toggleSelectTag:()=>{C.Z.toggleTaskListDropdown()},closeTaskCreation:()=>{C.Z.closeTaskCreation()},createTask:()=>{const n=u.Z.addNewTask(C.Z.extractTaskFromCreation());C.Z.addNewTask(n,f(n),v(n)),C.Z.closeTaskCreation()},openTask:function(n){C.Z.openTaskModal(n),C.Z.loadTaskInModal(n)},updateTask:()=>{},closeTask:()=>{C.Z.closeTaskModal()},removeTask:()=>{const n=C.Z.extractIdOfCurrentTask();u.Z.removeTask(n),C.Z.removeTask(n),C.Z.closeTaskModal(),console.log(u.Z.getDataCopy())}},b=new Map([[".menu-time-options li:first-child",I.goToHome],[".tag-add",I.addTag],["button.data-clear",I.clearAll],["main button.add",I.newTask],[".task-creation .tag-group p",I.toggleSelectTag],[".task-creation .cancel",I.closeTaskCreation],[".task-creation .submit",I.createTask],[".task-modal button.close",I.closeTask],[".task-modal .remove",I.removeTask],[".tag-modal .cancel",I.closeTagModal],[".tag-modal .submit",I.submitTag],[".tag-modal button.close",I.closeTagModal]]),B=Array.from(b,(n=>n[0]));C.Z.querySelected(B).then((n=>{for(let e=0;e<B.length;e++)n[e].addEventListener("click",b.get(B[e]))})),console.log(h)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUkwSSxFQUFBLGdCQUFvQixHQUdsQ2lCLEVBQXFCLElBQUlDLElBQUksQ0FDL0IsQ0FBQyxvQ0FBcUNmLEVBQVlJLFVBQ2xELENBQUMsV0FBWUosRUFBWUssUUFDekIsQ0FBQyxvQkFBcUJMLEVBQVlPLFVBQ2xDLENBQUMsa0JBQW1CUCxFQUFZUyxTQUNoQyxDQUFDLDhCQUErQlQsRUFBWVUsaUJBQzVDLENBQUMseUJBQTBCVixFQUFZN0IsbUJBQ3ZDLENBQUMseUJBQTBCNkIsRUFBWVcsWUFDdkMsQ0FBQywyQkFBNEJYLEVBQVlhLFdBQ3pDLENBQUMsc0JBQXVCYixFQUFZbEcsWUFDcEMsQ0FBQyxxQkFBc0JrRyxFQUFZL0IsZUFDbkMsQ0FBQyxxQkFBc0IrQixFQUFZTSxXQUNuQyxDQUFDLDBCQUEyQk4sRUFBWS9CLGlCQUl0QytDLEVBQWtCQyxNQUFNQyxLQUFLSixHQUFvQm5LLEdBQVNBLEVBQU0sS0FDdEV3SixFQUFBLGdCQUFtQmEsR0FBaUJwRSxNQUFLdUUsSUFDckMsSUFBSyxJQUFJL1EsRUFBRSxFQUFHQSxFQUFFNFEsRUFBZ0I5USxPQUFRRSxJQUNwQytRLEVBQWUvUSxHQUFHbUcsaUJBQWlCLFFBQVN1SyxFQUFtQnhCLElBQUkwQixFQUFnQjVRLElBQ3ZGLElBR0o4RyxRQUFRQyxJQUFJeUksRSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvLWRvLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly90by1kby8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdG8tZG8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90by1kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90by1kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG8tZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdG8tZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90by1kby8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3RvLWRvLy4vc3JjL2RvbU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vdG8tZG8vLi9zcmMvbG9jYWxEYXRhSGFuZGxlci5qcyIsIndlYnBhY2s6Ly90by1kby8uL3NyYy9tb2RlbC5qcyIsIndlYnBhY2s6Ly90by1kby8uL3NyYy92aWV3LmpzIiwid2VicGFjazovL3RvLWRvL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvLWRvL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvLWRvL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90by1kby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvLWRvL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly90by1kby8uL3NyYy9zdHlsZS5jc3M/NzE2MyIsIndlYnBhY2s6Ly90by1kby8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIjpyb290IHtcXG4gICAgLS1ib2R5LWNvbG9yOiAjNTI2MzY4O1xcbiAgICAtLXN1Yi1jb2xvcjogIzFlMmYzOTtcXG4gICAgLS1saWdodC1zdWItY29sb3I6ICM0MDUyNTg7XFxuICAgIC0tYWNjZW50LWNvbG9yOiAjOTY4YTdkO1xcbiAgICAtLWRhcmstYWNjZW50LWNvbG9yOiAjODA2NzQyO1xcbiAgICAtLXRleHQtY29sb3I6ICNlNGUxY2Y7XFxufVxcblxcbioge1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxufVxcblxcbi5oaWRkZW4ge1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxufVxcblxcbmJvZHkge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDE1cmVtIDFmcjtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAzLjVyZW0gY2FsYygxMDB2aCAtIDMuNXJlbSk7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJvZHktY29sb3IpO1xcbiAgICBmb250LWZhbWlseTogJ1NlZ29lIFVJJywgVGFob21hLCBHZW5ldmEsIFZlcmRhbmEsIHNhbnMtc2VyaWY7XFxufVxcblxcbmxpIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcXG59XFxuXFxuLyogcHJlY2VkaW5nIGljb24gY2xhc3NlcyAqL1xcbi5pY29uIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgZ2FwOiAwLjVyZW07XFxufVxcblxcbnN2ZyB7XFxuICAgIHdpZHRoOiAyZW07XFxuICAgIGhlaWdodDogMmVtO1xcbn1cXG5cXG4udGFnIHN2ZyB7XFxuICAgIHdpZHRoOiAxZW07XFxuICAgIGhlaWdodDogMWVtO1xcbn1cXG5cXG4vKiBoZWFkZXIgKi9cXG5oZWFkZXIge1xcbiAgICBncmlkLWFyZWE6IDEvMS8xLzM7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXN1Yi1jb2xvcik7XFxufVxcblxcbi8qIHNpZGUgbWVudSovXFxubmF2IHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDJyZW0gYXV0byAzcmVtIDNyZW0gMWZyIDVyZW07XFxuICAgIHBhZGRpbmctbGVmdDogMnJlbTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbGlnaHQtc3ViLWNvbG9yKTtcXG59XFxuXFxubmF2IC5pY29uIHtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpO1xcbiAgICBmaWxsOiB2YXIoLS10ZXh0LWNvbG9yKTtcXG59XFxuXFxuLm1lbnUtdGltZS1vcHRpb25zIGxpIHtcXG4gICAgcGFkZGluZzogMDtcXG59XFxuXFxubmF2IGlucHV0IHtcXG4gICAgcGFkZGluZzogMC41cmVtO1xcbiAgICB3aWR0aDogNjAlOyAgXFxuICAgIGNvbG9yOnZhcigtLXRleHQtY29sb3IpXFxufVxcblxcbm5hdiAudGFnIHAge1xcbiAgICB3aWR0aDogNjAlO1xcbn1cXG5cXG4udGFnLWxpc3QgbGkge1xcbiAgICBwYWRkaW5nOiAwLjVlbSAwIDAuNWVtIDJlbTtcXG59XFxuXFxuLyogbWFpbiBjb250ZW50ICovXFxubWFpbiB7XFxuICAgIHBhZGRpbmc6IDJyZW0gNHJlbTtcXG4gICAgb3ZlcmZsb3c6IGF1dG87XFxufVxcblxcbmlucHV0IHtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLnRhc2stbGlzdC1oZWFkIHtcXG4gICAgZGlzcGxheTpmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbn1cXG5cXG4uZGl2aWRlciB7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLWFjY2VudC1jb2xvcik7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDA7XFxuICAgIG1hcmdpbi1sZWZ0OiAxcmVtO1xcbn1cXG5cXG4udGFzay1jcmVhdGlvbiB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMTByZW0gOHJlbSA3cmVtIGF1dG8gNnJlbSA2cmVtO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDNyZW0gM3JlbSAzcmVtO1xcbiAgICBib3JkZXI6IDNweCBzb2xpZCB2YXIoLS1zdWItY29sb3IpO1xcbiAgICBib3JkZXItcmFkaXVzOiA2cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYigxMSAyMiAzMyAvIDQ0JSk7XFxuICAgIFxcbn1cXG5cXG4udGFzay1jcmVhdGlvbiBpbnB1dDo6cGxhY2Vob2xkZXIge1xcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7XFxufVxcblxcbi50YXNrLWNyZWF0aW9uIHNlbGVjdCwgLnRhc2stY3JlYXRpb24gaW5wdXRbdHlwZT1kYXRlXSwgLnRhc2stY3JlYXRpb24gLnRhZy1ncm91cCB7XFxuICAgIG1hcmdpbjogNnB4O1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLXRleHQtY29sb3IpO1xcbiAgICBib3JkZXItcmFkaXVzOiA2cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYig5MiAxMDUgMTA3IC8gNTElKTtcXG4gICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpO1xcbn1cXG5cXG4udGFzay1jcmVhdGlvbiBwLCAudGFzay1jcmVhdGlvbiBsaSB7XFxuICAgIHBhZGRpbmc6IDAuNXJlbTtcXG4gICAgZm9udC1zaXplOiAwLjlyZW07XFxufVxcblxcbi50YXNrLWNyZWF0aW9uIGxpIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzFlMmYzOTtcXG59XFxuXFxuLnRhc2stY3JlYXRpb24gaW5wdXRbdHlwZT1jaGVja2JveF0ge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDAuNXJlbTtcXG59XFxuXFxuLnRhc2stY3JlYXRpb24gb3B0aW9uIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc3ViLWNvbG9yKTtcXG4gICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpO1xcbn1cXG5cXG4udGFzay1jcmVhdGlvbiBidXR0b24ge1xcbiAgICBtYXJnaW46IDZweDtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBib3JkZXItcmFkaXVzOiA2cHg7XFxufVxcblxcbi50YXNrLWVudHJ5IHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAycmVtIGF1dG87XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcXG4gICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpO1xcbn1cXG5cXG4udGFzay1lbnRyeSBidXR0b24ge1xcbiAgICBncmlkLWFyZWE6IDEvMS8zLzE7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgZmlsbDogdmFyKC0tc3ViLWNvbG9yKTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxufVxcblxcbi50YWctZ3JvdXAge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LXdyYXA6IHdyYXA7XFxuICAgIGdhcDogMC41cmVtO1xcbiAgICBwYWRkaW5nOiAxcmVtIDAgMCAwO1xcbn1cXG5cXG5tYWluIC5pY29uIHtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgY29sb3I6IHZhcigtLXRleHQtY29sb3IpO1xcbiAgICBmaWxsOiB2YXIoLS10ZXh0LWNvbG9yKTtcXG59XFxuXFxuXFxuLyogdGFzayBtb2RhbCAqL1xcbi50YXNrLW1vZGFsLXdyYXBwZXIsIC50YWctbW9kYWwtd3JhcHBlciB7XFxuICAgIHBvc2l0aW9uOmZpeGVkO1xcbiAgICB3aWR0aDogMTAwdnc7XFxuICAgIGhlaWdodDogMTAwdmg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwwLDAsMC4zKTtcXG59XFxuXFxuLnRhc2stbW9kYWwsIC50YWctbW9kYWwge1xcbiAgICBwb3NpdGlvbjogaW5oZXJpdDtcXG4gICAgLS1tb2RhbC13aWR0aDogMzAwcHg7XFxuICAgIC0tbW9kYWwtaGVpZ2h0OiAzMDBweDtcXG4gICAgd2lkdGg6IHZhcigtLW1vZGFsLXdpZHRoKTtcXG4gICAgaGVpZ2h0OiB2YXIoLS1tb2RhbC1oZWlnaHQpO1xcbiAgICBib3R0b206IGNhbGMoNTAlIC0gdmFyKC0tbW9kYWwtaGVpZ2h0KS8yKTtcXG4gICAgcmlnaHQ6IGNhbGMoNTAlIC0gdmFyKC0tbW9kYWwtd2lkdGgpLzIpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1hY2NlbnQtY29sb3IpO1xcbiAgICBwYWRkaW5nOiAzcmVtO1xcbn1cXG5cXG4uY2xvc2Uge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIHJpZ2h0OiAwLjVyZW07XFxuICAgIHRvcDogMC41cmVtO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBwYWRkaW5nOiAwO1xcbn1cXG5cXG4udGFzay1tb2RhbCBpbnB1dCwgLnRhc2stbW9kYWwgdGV4dGFyZWEge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtJQUNJLHFCQUFxQjtJQUNyQixvQkFBb0I7SUFDcEIsMEJBQTBCO0lBQzFCLHVCQUF1QjtJQUN2Qiw0QkFBNEI7SUFDNUIscUJBQXFCO0FBQ3pCOztBQUVBO0lBQ0ksU0FBUztJQUNULFVBQVU7QUFDZDs7QUFFQTtJQUNJLHdCQUF3QjtBQUM1Qjs7QUFFQTtJQUNJLGFBQWE7SUFDYixnQ0FBZ0M7SUFDaEMsK0NBQStDO0lBQy9DLG1DQUFtQztJQUNuQyw0REFBNEQ7QUFDaEU7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsZ0JBQWdCO0FBQ3BCOztBQUVBLDJCQUEyQjtBQUMzQjtJQUNJLGFBQWE7SUFDYixtQkFBbUI7SUFDbkIsV0FBVztBQUNmOztBQUVBO0lBQ0ksVUFBVTtJQUNWLFdBQVc7QUFDZjs7QUFFQTtJQUNJLFVBQVU7SUFDVixXQUFXO0FBQ2Y7O0FBRUEsV0FBVztBQUNYO0lBQ0ksa0JBQWtCO0lBQ2xCLGtDQUFrQztBQUN0Qzs7QUFFQSxhQUFhO0FBQ2I7SUFDSSxhQUFhO0lBQ2IsMkJBQTJCO0lBQzNCLGdEQUFnRDtJQUNoRCxrQkFBa0I7SUFDbEIsd0NBQXdDO0FBQzVDOztBQUVBO0lBQ0ksWUFBWTtJQUNaLDZCQUE2QjtJQUM3QixlQUFlO0lBQ2YsaUJBQWlCO0lBQ2pCLHdCQUF3QjtJQUN4Qix1QkFBdUI7QUFDM0I7O0FBRUE7SUFDSSxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsVUFBVTtJQUNWO0FBQ0o7O0FBRUE7SUFDSSxVQUFVO0FBQ2Q7O0FBRUE7SUFDSSwwQkFBMEI7QUFDOUI7O0FBRUEsaUJBQWlCO0FBQ2pCO0lBQ0ksa0JBQWtCO0lBQ2xCLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osNkJBQTZCO0FBQ2pDOztBQUVBO0lBQ0ksWUFBWTtJQUNaLG1CQUFtQjtBQUN2Qjs7QUFFQTtJQUNJLHFDQUFxQztJQUNyQyxXQUFXO0lBQ1gsU0FBUztJQUNULGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixxREFBcUQ7SUFDckQsa0NBQWtDO0lBQ2xDLGtDQUFrQztJQUNsQyxrQkFBa0I7SUFDbEIscUNBQXFDOztBQUV6Qzs7QUFFQTtJQUNJLHdCQUF3QjtBQUM1Qjs7QUFFQTtJQUNJLFdBQVc7SUFDWCxVQUFVO0lBQ1YsZUFBZTtJQUNmLG1DQUFtQztJQUNuQyxrQkFBa0I7SUFDbEIsdUNBQXVDO0lBQ3ZDLHdCQUF3QjtBQUM1Qjs7QUFFQTtJQUNJLGVBQWU7SUFDZixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSx5QkFBeUI7QUFDN0I7O0FBRUE7SUFDSSxvQkFBb0I7QUFDeEI7O0FBRUE7SUFDSSxrQ0FBa0M7SUFDbEMsd0JBQXdCO0FBQzVCOztBQUVBO0lBQ0ksV0FBVztJQUNYLFlBQVk7SUFDWixrQkFBa0I7QUFDdEI7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsZ0NBQWdDO0lBQ2hDLHdCQUF3QjtJQUN4Qix3QkFBd0I7QUFDNUI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLHNCQUFzQjtJQUN0Qiw2QkFBNkI7QUFDakM7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsZUFBZTtJQUNmLFdBQVc7SUFDWCxtQkFBbUI7QUFDdkI7O0FBRUE7SUFDSSxZQUFZO0lBQ1osNkJBQTZCO0lBQzdCLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsd0JBQXdCO0lBQ3hCLHVCQUF1QjtBQUMzQjs7O0FBR0EsZUFBZTtBQUNmO0lBQ0ksY0FBYztJQUNkLFlBQVk7SUFDWixhQUFhO0lBQ2IsaUNBQWlDO0FBQ3JDOztBQUVBO0lBQ0ksaUJBQWlCO0lBQ2pCLG9CQUFvQjtJQUNwQixxQkFBcUI7SUFDckIseUJBQXlCO0lBQ3pCLDJCQUEyQjtJQUMzQix5Q0FBeUM7SUFDekMsdUNBQXVDO0lBQ3ZDLHFDQUFxQztJQUNyQyxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksa0JBQWtCO0lBQ2xCLGFBQWE7SUFDYixXQUFXO0lBQ1gsNkJBQTZCO0lBQzdCLFlBQVk7SUFDWixVQUFVO0FBQ2Q7O0FBRUE7SUFDSSw2QkFBNkI7QUFDakNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiOnJvb3Qge1xcbiAgICAtLWJvZHktY29sb3I6ICM1MjYzNjg7XFxuICAgIC0tc3ViLWNvbG9yOiAjMWUyZjM5O1xcbiAgICAtLWxpZ2h0LXN1Yi1jb2xvcjogIzQwNTI1ODtcXG4gICAgLS1hY2NlbnQtY29sb3I6ICM5NjhhN2Q7XFxuICAgIC0tZGFyay1hY2NlbnQtY29sb3I6ICM4MDY3NDI7XFxuICAgIC0tdGV4dC1jb2xvcjogI2U0ZTFjZjtcXG59XFxuXFxuKiB7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG59XFxuXFxuLmhpZGRlbiB7XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuXFxuYm9keSB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMTVyZW0gMWZyO1xcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IDMuNXJlbSBjYWxjKDEwMHZoIC0gMy41cmVtKTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYm9keS1jb2xvcik7XFxuICAgIGZvbnQtZmFtaWx5OiAnU2Vnb2UgVUknLCBUYWhvbWEsIEdlbmV2YSwgVmVyZGFuYSwgc2Fucy1zZXJpZjtcXG59XFxuXFxubGkge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG4vKiBwcmVjZWRpbmcgaWNvbiBjbGFzc2VzICovXFxuLmljb24ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBnYXA6IDAuNXJlbTtcXG59XFxuXFxuc3ZnIHtcXG4gICAgd2lkdGg6IDJlbTtcXG4gICAgaGVpZ2h0OiAyZW07XFxufVxcblxcbi50YWcgc3ZnIHtcXG4gICAgd2lkdGg6IDFlbTtcXG4gICAgaGVpZ2h0OiAxZW07XFxufVxcblxcbi8qIGhlYWRlciAqL1xcbmhlYWRlciB7XFxuICAgIGdyaWQtYXJlYTogMS8xLzEvMztcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tc3ViLWNvbG9yKTtcXG59XFxuXFxuLyogc2lkZSBtZW51Ki9cXG5uYXYge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IGF1dG87XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogMnJlbSBhdXRvIDNyZW0gM3JlbSAxZnIgNXJlbTtcXG4gICAgcGFkZGluZy1sZWZ0OiAycmVtO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1saWdodC1zdWItY29sb3IpO1xcbn1cXG5cXG5uYXYgLmljb24ge1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBmb250LXNpemU6IDFyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7XFxuICAgIGZpbGw6IHZhcigtLXRleHQtY29sb3IpO1xcbn1cXG5cXG4ubWVudS10aW1lLW9wdGlvbnMgbGkge1xcbiAgICBwYWRkaW5nOiAwO1xcbn1cXG5cXG5uYXYgaW5wdXQge1xcbiAgICBwYWRkaW5nOiAwLjVyZW07XFxuICAgIHdpZHRoOiA2MCU7ICBcXG4gICAgY29sb3I6dmFyKC0tdGV4dC1jb2xvcilcXG59XFxuXFxubmF2IC50YWcgcCB7XFxuICAgIHdpZHRoOiA2MCU7XFxufVxcblxcbi50YWctbGlzdCBsaSB7XFxuICAgIHBhZGRpbmc6IDAuNWVtIDAgMC41ZW0gMmVtO1xcbn1cXG5cXG4vKiBtYWluIGNvbnRlbnQgKi9cXG5tYWluIHtcXG4gICAgcGFkZGluZzogMnJlbSA0cmVtO1xcbiAgICBvdmVyZmxvdzogYXV0bztcXG59XFxuXFxuaW5wdXQge1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG4udGFzay1saXN0LWhlYWQge1xcbiAgICBkaXNwbGF5OmZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi5kaXZpZGVyIHtcXG4gICAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tYWNjZW50LWNvbG9yKTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGhlaWdodDogMDtcXG4gICAgbWFyZ2luLWxlZnQ6IDFyZW07XFxufVxcblxcbi50YXNrLWNyZWF0aW9uIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMHJlbSA4cmVtIDdyZW0gYXV0byA2cmVtIDZyZW07XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogM3JlbSAzcmVtIDNyZW07XFxuICAgIGJvcmRlcjogM3B4IHNvbGlkIHZhcigtLXN1Yi1jb2xvcik7XFxuICAgIGJvcmRlci1yYWRpdXM6IDZweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDExIDIyIDMzIC8gNDQlKTtcXG4gICAgXFxufVxcblxcbi50YXNrLWNyZWF0aW9uIGlucHV0OjpwbGFjZWhvbGRlciB7XFxuICAgIGNvbG9yOiB2YXIoLS10ZXh0LWNvbG9yKTtcXG59XFxuXFxuLnRhc2stY3JlYXRpb24gc2VsZWN0LCAudGFzay1jcmVhdGlvbiBpbnB1dFt0eXBlPWRhdGVdLCAudGFzay1jcmVhdGlvbiAudGFnLWdyb3VwIHtcXG4gICAgbWFyZ2luOiA2cHg7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgYm9yZGVyOiAycHggc29saWQgdmFyKC0tdGV4dC1jb2xvcik7XFxuICAgIGJvcmRlci1yYWRpdXM6IDZweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDkyIDEwNSAxMDcgLyA1MSUpO1xcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7XFxufVxcblxcbi50YXNrLWNyZWF0aW9uIHAsIC50YXNrLWNyZWF0aW9uIGxpIHtcXG4gICAgcGFkZGluZzogMC41cmVtO1xcbiAgICBmb250LXNpemU6IDAuOXJlbTtcXG59XFxuXFxuLnRhc2stY3JlYXRpb24gbGkge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWUyZjM5O1xcbn1cXG5cXG4udGFzay1jcmVhdGlvbiBpbnB1dFt0eXBlPWNoZWNrYm94XSB7XFxuICAgIG1hcmdpbi1yaWdodDogMC41cmVtO1xcbn1cXG5cXG4udGFzay1jcmVhdGlvbiBvcHRpb24ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1zdWItY29sb3IpO1xcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7XFxufVxcblxcbi50YXNrLWNyZWF0aW9uIGJ1dHRvbiB7XFxuICAgIG1hcmdpbjogNnB4O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDZweDtcXG59XFxuXFxuLnRhc2stZW50cnkge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDJyZW0gYXV0bztcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvO1xcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7XFxufVxcblxcbi50YXNrLWVudHJ5IGJ1dHRvbiB7XFxuICAgIGdyaWQtYXJlYTogMS8xLzMvMTtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBmaWxsOiB2YXIoLS1zdWItY29sb3IpO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG59XFxuXFxuLnRhZy1ncm91cCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtd3JhcDogd3JhcDtcXG4gICAgZ2FwOiAwLjVyZW07XFxuICAgIHBhZGRpbmc6IDFyZW0gMCAwIDA7XFxufVxcblxcbm1haW4gLmljb24ge1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBmb250LXNpemU6IDFyZW07XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICBjb2xvcjogdmFyKC0tdGV4dC1jb2xvcik7XFxuICAgIGZpbGw6IHZhcigtLXRleHQtY29sb3IpO1xcbn1cXG5cXG5cXG4vKiB0YXNrIG1vZGFsICovXFxuLnRhc2stbW9kYWwtd3JhcHBlciwgLnRhZy1tb2RhbC13cmFwcGVyIHtcXG4gICAgcG9zaXRpb246Zml4ZWQ7XFxuICAgIHdpZHRoOiAxMDB2dztcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLDAsMCwwLjMpO1xcbn1cXG5cXG4udGFzay1tb2RhbCwgLnRhZy1tb2RhbCB7XFxuICAgIHBvc2l0aW9uOiBpbmhlcml0O1xcbiAgICAtLW1vZGFsLXdpZHRoOiAzMDBweDtcXG4gICAgLS1tb2RhbC1oZWlnaHQ6IDMwMHB4O1xcbiAgICB3aWR0aDogdmFyKC0tbW9kYWwtd2lkdGgpO1xcbiAgICBoZWlnaHQ6IHZhcigtLW1vZGFsLWhlaWdodCk7XFxuICAgIGJvdHRvbTogY2FsYyg1MCUgLSB2YXIoLS1tb2RhbC1oZWlnaHQpLzIpO1xcbiAgICByaWdodDogY2FsYyg1MCUgLSB2YXIoLS1tb2RhbC13aWR0aCkvMik7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWFjY2VudC1jb2xvcik7XFxuICAgIHBhZGRpbmc6IDNyZW07XFxufVxcblxcbi5jbG9zZSB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgcmlnaHQ6IDAuNXJlbTtcXG4gICAgdG9wOiAwLjVyZW07XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIHBhZGRpbmc6IDA7XFxufVxcblxcbi50YXNrLW1vZGFsIGlucHV0LCAudGFzay1tb2RhbCB0ZXh0YXJlYSB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbn1cXG5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcblxuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXNJbkRPTS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdHlsZXNJbkRPTVtpXS5pZGVudGlmaWVyID09PSBpZGVudGlmaWVyKSB7XG4gICAgICByZXN1bHQgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGl0ZW0gPSBsaXN0W2ldO1xuICAgIHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuICAgIHZhciBjb3VudCA9IGlkQ291bnRNYXBbaWRdIHx8IDA7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBcIlwiLmNvbmNhdChpZCwgXCIgXCIpLmNvbmNhdChjb3VudCk7XG4gICAgaWRDb3VudE1hcFtpZF0gPSBjb3VudCArIDE7XG4gICAgdmFyIGluZGV4QnlJZGVudGlmaWVyID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgdmFyIG9iaiA9IHtcbiAgICAgIGNzczogaXRlbVsxXSxcbiAgICAgIG1lZGlhOiBpdGVtWzJdLFxuICAgICAgc291cmNlTWFwOiBpdGVtWzNdLFxuICAgICAgc3VwcG9ydHM6IGl0ZW1bNF0sXG4gICAgICBsYXllcjogaXRlbVs1XVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuXG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB1cGRhdGVyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydFN0eWxlRWxlbWVudDsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMoc3R5bGVFbGVtZW50KSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChvYmouc3VwcG9ydHMsIFwiKSB7XCIpO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG5cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIkBsYXllclwiLmNvbmNhdChvYmoubGF5ZXIubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChvYmoubGF5ZXIpIDogXCJcIiwgXCIge1wiKTtcbiAgfVxuXG4gIGNzcyArPSBvYmouY3NzO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiLmNvbmNhdChidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpLCBcIiAqL1wiKTtcbiAgfSAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG5cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlRWxlbWVudC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCkge1xuICBpZiAoc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQpIHtcbiAgICBzdHlsZUVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGVFbGVtZW50LnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvKlxuXG5Nb2R1bGUgZm9yIGhhbmRsaW5nIHJlZHVuZGFudCBET00gdGFza3MuXG5cbiovXG5jb25zdCBkb21NYW5hZ2VyID0gKCgpPT57XG4gICAgZnVuY3Rpb24gcXVlcnkoc2VsZWN0b3IpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOyB9XG4gICAgZnVuY3Rpb24gcXVlcnlBbGwoc2VsZWN0b3IpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpOyB9XG4gICAgY29uc3QgZWxlbWVudEV4aXN0cyA9IChzZWxlY3RvcikgPT4gcXVlcnkoc2VsZWN0b3IpICE9IG51bGw7XG4gICAgY29uc3QgcXVlcnlJZlNlbGVjdG9yID0gKHNlbGVjdG9yKT0+eyByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09IFwic3RyaW5nXCIgPyBxdWVyeShzZWxlY3RvcikgOiBzZWxlY3RvcjsgfTtcbiAgICBcbiAgICBjb25zdCBjcmVhdGVTVkdFbGVtZW50ID0gKGRhdGEpID0+IHtcbiAgICAgICAgY29uc3Qgc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgJ3N2ZycpO1xuICAgICAgICBjb25zdCBwYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiwgJ3BhdGgnKTtcbiAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoXCJkXCIsIGRhdGEucGF0aCk7XG4gICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJ2aWV3Ym94XCIsIFwiMCAwIDI0IDI0XCIpO1xuICAgICAgICBzdmcuYXBwZW5kQ2hpbGQocGF0aCk7XG4gICAgICAgIHJldHVybiBzdmc7XG4gICAgfTtcblxuICAgIGNvbnN0IHNldENsaWNrID0gZnVuY3Rpb24oZWxlbWVudFNlbGVjdG9yLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gcXVlcnkoZWxlbWVudFNlbGVjdG9yKTtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2FsbGJhY2spO1xuICAgIH07XG5cbiAgICBjb25zdCBzZXRWaXNpYmxlID0gKHNlbGVjdG9yLCB2aXNpYmxlID0gdHJ1ZSkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50Q2xhc3NMaXN0ID0gcXVlcnlJZlNlbGVjdG9yKHNlbGVjdG9yKS5jbGFzc0xpc3Q7XG4gICAgICAgIHZpc2libGUgPyBlbGVtZW50Q2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKSA6IGVsZW1lbnRDbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICAgIH1cbiAgICBjb25zdCBtb3ZlRG93biA9IChzZWxlY3Rvcik9PntcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHF1ZXJ5KHNlbGVjdG9yKTtcbiAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIH07XG5cbiAgICBjb25zdCBhZGRFbnRyeU9mVGVtcGxhdGUgPSBmdW5jdGlvbih0ZW1wbGF0ZVNlbGVjdG9yLCBjb250YWluZXJTZWxlY3Rvcikge1xuICAgICAgICBjb25zdCBlbnRyeVRlbXBsYXRlID0gcXVlcnkodGVtcGxhdGVTZWxlY3Rvcik7XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gZW50cnlUZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHF1ZXJ5KGNvbnRhaW5lclNlbGVjdG9yKTtcbiAgICAgICAgZW50cnkuY2xhc3NMaXN0LnJlbW92ZShcImhpZGRlblwiKTtcbiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVudHJ5KTtcbiAgICAgICAgcmV0dXJuIGVudHJ5O1xuICAgIH07XG5cbiAgICAvLyBSZXR1cm5zIHRoZSBpbnB1dCBlbGVtZW50XG4gICAgLy8gY2FsbGJhY2sgbXVzdCBoYXZlIG9uZSBhcmcgdG8gcGFzcyB0ZXh0XG4gICAgY29uc3QgYWRkVGVtcG9yYXJ5SW5wdXQgPSBmdW5jdGlvbihlbGVtZW50U2VsZWN0b3IsIGNvbnRhaW5lclNlbGVjdG9yLCBpbnB1dFN0eWxlID0gXCJcIikge1xuICAgICAgICBjb25zdCBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBxdWVyeShlbGVtZW50U2VsZWN0b3IpO1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBxdWVyeShjb250YWluZXJTZWxlY3Rvcik7XG4gICAgICAgIGlmICghKGVsZW1lbnQgfHwgY29udGFpbmVyKSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJGYWlsZWQgdG8gZmluZCBlbGVtZW50IG9yIGNvbnRhaW5lclwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpbnB1dC5zdHlsZSArPSBpbnB1dFN0eWxlO1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICAgIGlucHV0LnNlbGVjdCgpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIlN3YXBwZWQgb3V0IGlucHV0LlwiKVxuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuXG4gICAgY29uc3Qgc3dhcElucHV0V2l0aFRleHQgPSBmdW5jdGlvbihpbnB1dCwgdGV4dFNlbGVjdG9yLCByZW1vdmVJbnB1dD1mYWxzZSkge1xuICAgICAgICBjb25zdCB0ZXh0ID0gcXVlcnkodGV4dFNlbGVjdG9yKTtcbiAgICAgICAgdGV4dC50ZXh0Q29udGVudCA9IGlucHV0LnZhbHVlO1xuICAgICAgICB0ZXh0LmNsYXNzTGlzdC5yZW1vdmUoXCJoaWRkZW5cIik7XG4gICAgICAgIGlmIChyZW1vdmVJbnB1dCkge1xuICAgICAgICAgICAgaW5wdXQucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuICAgIFxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgcXVlcnksIFxuICAgICAgICBxdWVyeUFsbCwgXG4gICAgICAgIGNyZWF0ZVNWR0VsZW1lbnQsIFxuICAgICAgICBzZXRWaXNpYmxlLCBcbiAgICAgICAgbW92ZURvd24sIFxuICAgICAgICBzZXRDbGljaywgXG4gICAgICAgIGFkZEVudHJ5T2ZUZW1wbGF0ZSwgXG4gICAgICAgIGFkZFRlbXBvcmFyeUlucHV0LCBcbiAgICAgICAgc3dhcElucHV0V2l0aFRleHQsIFxuICAgICAgICBlbGVtZW50RXhpc3RzXG4gICAgfTtcbn0pKCk7XG5leHBvcnQgZGVmYXVsdCBkb21NYW5hZ2VyOyIsIi8qXG5Nb2R1bGUgZm9yIGhhbmRsaW5nIG9wZXJhdGlvbnMgZm9yIGxvY2FsIHN0b3JhZ2UgZGF0YVxuSGFuZGxlcyByZXRyaWV2aW5nIGFuZCBzYXZpbmcgZGF0YSBmcm9tIGxvY2FsIHN0b3JhZ2UuIFxuKi9cbmNvbnN0IGxvY2FsRGF0YUhhbmRsZXIgPSAoKCk9PntcbiAgICBcbiAgICBmdW5jdGlvbiBoYXNFeGlzdGluZ0RhdGEoKSB7IHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlLmRhdGEgfHwgZmFsc2U7IH1cbiAgICBmdW5jdGlvbiBnZXREYXRhQ29weSgpIHsgcmV0dXJuIEpTT04ucGFyc2Uod2luZG93LmxvY2FsU3RvcmFnZS5kYXRhKSB8fCBudWxsOyB9XG5cbiAgICAvLyBDaGVja3MgaWYgbG9jYWwgc3RvcmFnZSBjYW4gYmUgdXNlZFxuICAgIGZ1bmN0aW9uIHN0b3JhZ2VBdmFpbGFibGUodHlwZSkge1xuICAgICAgICBsZXQgc3RvcmFnZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN0b3JhZ2UgPSB3aW5kb3dbdHlwZV07XG4gICAgICAgICAgICBjb25zdCB4ID0gJ19fc3RvcmFnZV90ZXN0X18nO1xuICAgICAgICAgICAgc3RvcmFnZS5zZXRJdGVtKHgsIHgpO1xuICAgICAgICAgICAgc3RvcmFnZS5yZW1vdmVJdGVtKHgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlIGluc3RhbmNlb2YgRE9NRXhjZXB0aW9uICYmIChcbiAgICAgICAgICAgICAgICAvLyBldmVyeXRoaW5nIGV4Y2VwdCBGaXJlZm94XG4gICAgICAgICAgICAgICAgZS5jb2RlID09PSAyMiB8fFxuICAgICAgICAgICAgICAgIC8vIEZpcmVmb3hcbiAgICAgICAgICAgICAgICBlLmNvZGUgPT09IDEwMTQgfHxcbiAgICAgICAgICAgICAgICAvLyB0ZXN0IG5hbWUgZmllbGQgdG9vLCBiZWNhdXNlIGNvZGUgbWlnaHQgbm90IGJlIHByZXNlbnRcbiAgICAgICAgICAgICAgICAvLyBldmVyeXRoaW5nIGV4Y2VwdCBGaXJlZm94XG4gICAgICAgICAgICAgICAgZS5uYW1lID09PSAnUXVvdGFFeGNlZWRlZEVycm9yJyB8fFxuICAgICAgICAgICAgICAgIC8vIEZpcmVmb3hcbiAgICAgICAgICAgICAgICBlLm5hbWUgPT09ICdOU19FUlJPUl9ET01fUVVPVEFfUkVBQ0hFRCcpICYmXG4gICAgICAgICAgICAgICAgLy8gYWNrbm93bGVkZ2UgUXVvdGFFeGNlZWRlZEVycm9yIG9ubHkgaWYgdGhlcmUncyBzb21ldGhpbmcgYWxyZWFkeSBzdG9yZWRcbiAgICAgICAgICAgICAgICAoc3RvcmFnZSAmJiBzdG9yYWdlLmxlbmd0aCAhPT0gMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXNldCBkYXRhIHNlc3Npb24gYW5kIGxvY2FsbHlcbiAgICBjb25zdCBjbGVhciA9ICgpID0+IHtcbiAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkNsZWFyZWQgbG9jYWwgZGF0YS5cIilcbiAgICB9O1xuXG4gICAgLy8gU2F2ZSBnaXZlbiBkYXRhIG9iamVjdCBpbnRvIGxvY2FsIHN0b3JhZ2VcbiAgICBjb25zdCBzYXZlID0gKHRhcmdldERhdGEpID0+IHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXREYXRhICE9IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkNhbm5vdCBzYXZlIGRhdGEgYmVjYXVzZSB0YXJnZXQgZGF0YSBpc24ndCBhbiBPYmplY3RcIilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2RhdGEnLCBKU09OLnN0cmluZ2lmeSh0YXJnZXREYXRhKSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiU2F2ZWQgZGF0YS5cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtzYXZlLCBjbGVhciwgaGFzRXhpc3RpbmdEYXRhLCBnZXREYXRhQ29weX07XG5cbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGxvY2FsRGF0YUhhbmRsZXI7IiwiaW1wb3J0IGxvY2FsRGF0YUhhbmRsZXIgZnJvbSBcIi4vbG9jYWxEYXRhSGFuZGxlci5qc1wiO1xuLypcblxuTW9kZWwgbW9kdWxlXG4tIEhhbmRsZXMgc2Vzc2lvbiBhbmQgbG9jYWwgZGF0YSBsb2dpY1xuLSBSZXR1cm5zIHJlcXVlc3RzIGZvciBkYXRhXG4qL1xuY29uc3QgbW9kZWwgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGluaXRpYWxEYXRhID0ge1xuICAgICAgICB2ZXJzaW9uOiBcIjAuMi4wXCIsXG4gICAgICAgIHVzZXI6IFwiR3Vlc3RcIixcbiAgICAgICAgdGFza3M6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZDogMCxcbiAgICAgICAgICAgICAgICBjaGVja2VkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB0aXRsZTogXCJBZGQgTmV3IFRhc2tcIixcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJQcmVzc2luZyBcXFwiQWRkIFRhc2tcXFwiIGF0IHRoZSBib3R0b20gYWRkcyBhIG5ldyB0YXNrLlwiLFxuICAgICAgICAgICAgICAgIGRlYWRsaW5lOiBcIlwiLFxuICAgICAgICAgICAgICAgIHByaW9yaXR5OiBcIk5vbmVcIixcbiAgICAgICAgICAgICAgICB0YWdzOiBbXG4gICAgICAgICAgICAgICAgICAgIHsgbmFtZTpcIldvcmtcIiwgY29sb3I6XCIjMDAwMDAwXCIgfSAgICBcbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlkOiAxLFxuICAgICAgICAgICAgICAgIGNoZWNrZWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcIkFkZCBOZXcgVGFnXCIsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiUHJlc3NpbmcgXFxcIkFkZCBUYWdcXFwiIG9uIHRoZSBzaWRlIG1lbnUgbGV0cyB5b3UgYWRkIGEgbmV3IHRhZy5cIixcbiAgICAgICAgICAgICAgICBkZWFkbGluZTogXCJcIixcbiAgICAgICAgICAgICAgICBwcmlvcml0eTogXCJOb25lXCIsXG4gICAgICAgICAgICAgICAgdGFnczogW1xuICAgICAgICAgICAgICAgICAgICB7IG5hbWU6XCJXb3JrXCIsIGNvbG9yOlwiIzAwMDAwMFwiIH0gICAgXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICB0YWdzOiBbXG4gICAgICAgICAgICB7IG5hbWU6XCJXb3JrXCIsIGNvbG9yOlwiIzAwMDAwMFwiIH0sIFxuICAgICAgICAgICAgeyBuYW1lOlwiSG9iYnlcIiwgY29sb3I6XCIjMDAwMDAwXCIgfSwgXG4gICAgICAgICAgICB7IG5hbWU6XCJTaG9wcGluZ1wiLCBjb2xvcjpcIiMwMDAwMDBcIiB9XG4gICAgICAgIF0sXG4gICAgICAgIC8vIE5ldyBjb2xvcnMgbXVzdCBiZSBhcHBlbmRlZCB0byBwcmV2ZW50IG9yZGVyIGZyb20gYmVpbmcgaW50ZXJmZXJlZFxuICAgICAgICB0YWdDb2xvcnM6IFtcIiNkZDQyNDJcIiwgXCIjN2FiYjQ2XCIsIFwiIzNkOTVlMlwiXVxuICAgIH07XG5cbiAgICBsZXQgc2Vzc2lvbkRhdGE7XG4gICAgY29uc3QgZ2V0TmV4dFRhc2tJZCA9ICgpID0+ICFzZXNzaW9uRGF0YS50YXNrcyA/IDAgOiBzZXNzaW9uRGF0YS50YXNrc1tzZXNzaW9uRGF0YS50YXNrcy5sZW5ndGgtMV0uaWQgKyAxO1xuICAgIGNvbnN0IGdldFRhc2tCeUlkID0gKGlkKSA9PiBnZXREYXRhQ29weSgpLnRhc2tzLmZpbmQodGFzayA9PiB0YXNrLmlkID09IGlkKTtcbiAgICBjb25zdCBnZXREYXRhQ29weSA9ICgpID0+IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc2Vzc2lvbkRhdGEpKTtcbiAgICBjb25zdCBnZXREZWZhdWx0RGF0YUNvcHkgPSAoKSA9PiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGluaXRpYWxEYXRhKSk7XG4gICAgY29uc3Qgc2F2ZVRvTG9jYWwgPSAoKSA9PiBsb2NhbERhdGFIYW5kbGVyLnNhdmUoc2Vzc2lvbkRhdGEpO1xuXG4gICAgY29uc3QgcmV0cmlldmVBbmRVcGRhdGUgPSAocHJldmlvdXNEYXRhKSA9PiB7XG4gICAgICAgIGlmIChwcmV2aW91c0RhdGEudmVyc2lvbiA9PSBpbml0aWFsRGF0YS52ZXJzaW9uKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgVXNpbmcgbW9zdCB1cGRhdGVkIHZlcnNpb24gJHtpbml0aWFsRGF0YS52ZXJzaW9ufWApXG4gICAgICAgICAgICBzZXNzaW9uRGF0YSA9IHByZXZpb3VzRGF0YTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbml0aWFsRGF0YS52ZXJzaW9uWzBdID09IFwiMVwiKSB7XG4gICAgICAgICAgICAvLyBpZiBwdWJsaWMsIGhhbmRsZSB1cGRhdGUgdG8gZGF0YSBiYXNlZCBvbiB0aGUgdHJhbnNpdGlvbnMgZnJvbSB0aGUgcHJldmlvdXMgdmVyc2lvbiB0byBuZXdcbiAgICAgICAgICAgIHNlc3Npb25EYXRhID0gcHJldmlvdXNEYXRhO1xuICAgICAgICAgICAgLy8gdXBkYXRlIG5ldyBjaGFuZ2VzIHRvIHRoZSBtb2RlbCBoZXJlXG4gICAgICAgICAgICBzZXNzaW9uRGF0YS52ZXJzaW9uID0gaW5pdGlhbERhdGEudmVyc2lvbjtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBVcGRhdGVkIHRvIGxhdGVzdCB2ZXJzaW9uICR7aW5pdGlhbERhdGEudmVyc2lvbn1gKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gd2hpbGUgaW4gYmV0YSB2ZXJzaW9uLCByZXNldCBkYXRhIHRvIGRlZmF1bHQgd2hlbmV2ZXIgdGhlcmUncyBhbiB1cGRhdGVcbiAgICAgICAgICAgIHNlc3Npb25EYXRhID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShpbml0aWFsRGF0YSkpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYFJlc2V0aW5nIGRhdGEgZHVlIHRvIG5ldyB1cGRhdGUuIFVwZGF0ZWQgdG8gdmVyc2lvbiAke2luaXRpYWxEYXRhLnZlcnNpb259YCk7ICAgICAgICAgIFxuICAgICAgICB9XG4gICAgICAgIHNhdmVUb0xvY2FsKCk7XG4gICAgICAgIHJldHVybiBnZXREYXRhQ29weSgpO1xuICAgIH1cblxuICAgIGNvbnN0IGxvYWRVc2VyRGF0YSA9ICgpPT57XG4gICAgICAgIGNvbnNvbGUubG9nKFwiUmV0cmlldmluZyB1c2VyIGRhdGFcIik7XG4gICAgICAgIHJldHVybiBsb2NhbERhdGFIYW5kbGVyLmhhc0V4aXN0aW5nRGF0YSgpID8gcmV0cmlldmVBbmRVcGRhdGUobG9jYWxEYXRhSGFuZGxlci5nZXREYXRhQ29weSgpKSA6IGdldERlZmF1bHREYXRhQ29weSgpO1xuICAgIH1cblxuICAgIGNvbnN0IGFkZE5ld1RhZyA9ICh0YWcpID0+IHtcbiAgICAgICAgaWYgKCF0YWdbXCJuYW1lXCJdIHx8ICF0YWdbXCJjb2xvclwiXSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkV4dHJhY3RlZCBpbnZhbGlkIHRhZyBmb3JtYXRcIik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzZXNzaW9uRGF0YS50YWdzLnB1c2godGFnKTtcbiAgICAgICAgc2F2ZVRvTG9jYWwoKTtcbiAgICAgICAgcmV0dXJuIHRhZztcbiAgICB9XG5cbiAgICBjb25zdCBhZGROZXdUYXNrID0gKHRhc2spID0+IHtcbiAgICAgICAgaWYgKCEoKHR5cGVvZiB0YXNrW1wiaWRcIl0gPT0gXCJudW1iZXJcIikgXG4gICAgICAgICYmICh0YXNrW1wiY2hlY2tlZFwiXSAhPSBudWxsKSBcbiAgICAgICAgJiYgKHR5cGVvZiB0YXNrW1widGl0bGVcIl0gPT0gXCJzdHJpbmdcIikgXG4gICAgICAgICYmICh0eXBlb2YgdGFza1tcImRlc2NyaXB0aW9uXCJdID09IFwic3RyaW5nXCIpIFxuICAgICAgICAmJiAodHlwZW9mIHRhc2tbXCJkZWFkbGluZVwiXSA9PSBcInN0cmluZ1wiKSBcbiAgICAgICAgJiYgKHR5cGVvZiB0YXNrW1wicHJpb3JpdHlcIl0gPT0gXCJzdHJpbmdcIikgXG4gICAgICAgICYmIHRhc2tbXCJ0YWdzXCJdKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkV4dHJhY3RlZCBpbnZhbGlkIHRhc2sgZm9ybWF0XCIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGFza1tcImlkXCJdID0gZ2V0TmV4dFRhc2tJZCgpO1xuICAgICAgICBzZXNzaW9uRGF0YS50YXNrcy5wdXNoKHRhc2spO1xuICAgICAgICBzYXZlVG9Mb2NhbCgpO1xuICAgICAgICByZXR1cm4gdGFzaztcbiAgICB9XG5cbiAgICBjb25zdCB0b2dnbGVDaGVja09mZlRhc2sgPSAoaWQpID0+IHtcbiAgICAgICAgY29uc3QgdGFzayA9IHNlc3Npb25EYXRhLnRhc2tzLmZpbmQodGFzayA9PiB0YXNrLmlkID09IGlkKTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBzZXNzaW9uRGF0YS50YXNrcy5pbmRleE9mKHRhc2spO1xuICAgICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYENvdWxkIG5vdCBmaW5kIHRhc2sgb2YgaWQgJHtpZH1gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXNzaW9uRGF0YS50YXNrc1tpbmRleF0uY2hlY2tlZCA9ICFzZXNzaW9uRGF0YS50YXNrc1tpbmRleF0uY2hlY2tlZDtcbiAgICAgICAgc2F2ZVRvTG9jYWwoKTtcbiAgICAgICAgcmV0dXJuIHNlc3Npb25EYXRhLnRhc2tzW2luZGV4XS5jaGVja2VkO1xuICAgIH1cblxuICAgIGNvbnN0IHJlbW92ZVRhc2sgPSAoaWQpID0+IHtcbiAgICAgICAgY29uc3QgdGFzayA9IHNlc3Npb25EYXRhLnRhc2tzLmZpbmQodGFzayA9PiB0YXNrLmlkID09IGlkKTtcbiAgICAgICAgY29uc3QgaW5kZXggPSBzZXNzaW9uRGF0YS50YXNrcy5pbmRleE9mKHRhc2spO1xuICAgICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYENvdWxkIG5vdCBmaW5kIHRhc2sgb2YgaWQgJHtpZH1gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzZXNzaW9uRGF0YS50YXNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBzYXZlVG9Mb2NhbCgpO1xuICAgICAgICBjb25zb2xlLmxvZyhgUmVtb3ZlZCB0YXNrIGVudHJ5IGlkICR7aWR9YCk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzZXREYXRhID0gKCkgPT4ge1xuICAgICAgICBzZXNzaW9uRGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoaW5pdGlhbERhdGEpKTtcbiAgICAgICAgc2F2ZVRvTG9jYWwoKTtcbiAgICAgICAgcmV0dXJuIGdldERhdGFDb3B5KCk7XG4gICAgfTtcblxuICAgIHJldHVybiB7IFxuICAgICAgICBsb2FkVXNlckRhdGEsXG4gICAgICAgIGdldERhdGFDb3B5LFxuICAgICAgICBnZXRUYXNrQnlJZCxcbiAgICAgICAgYWRkTmV3VGFnLFxuICAgICAgICBhZGROZXdUYXNrLFxuICAgICAgICB0b2dnbGVDaGVja09mZlRhc2ssXG4gICAgICAgIHJlbW92ZVRhc2ssXG4gICAgICAgIHJlc2V0RGF0YVxuICAgIH0gXG59KSgpO1xuZXhwb3J0IGRlZmF1bHQgbW9kZWw7IiwiaW1wb3J0IGRvbU1hbmFnZXIgZnJvbSBcIi4vZG9tTWFuYWdlci5qc1wiO1xuLypcblZpZXcgbW9kdWxlXG4tIEhhbmRsZXMgRE9NIHVwZGF0aW5nIHRhc2tzXG4tIFJldHVybnMgcmVxdWVzdHMgZm9yIERPTSBpbmZvcm1hdGlvblxuKi9cbmNvbnN0IHZpZXcgPSAoKCk9PntcbiAgICAvLyBjYWNoZWQgZWxlbWVudHNcbiAgICBjb25zdCB0YXNrRW50cnlMaXN0RWxlbWVudCA9IGRvbU1hbmFnZXIucXVlcnkoXCIudGFzay1saXN0XCIpO1xuICAgIGNvbnN0IHRhZ0xpc3RFbGVtZW50ID0gZG9tTWFuYWdlci5xdWVyeShcIm5hdiB1bC50YWctbGlzdFwiKTtcbiAgICBjb25zdCB0YWdNb2RhbEVsZW1lbnQgPSBkb21NYW5hZ2VyLnF1ZXJ5KFwiLnRhZy1tb2RhbC13cmFwcGVyXCIpO1xuICAgIGNvbnN0IHRhc2tDcmVhdGlvbkVsZW1lbnQgPSBkb21NYW5hZ2VyLnF1ZXJ5KFwiLnRhc2stY3JlYXRpb25cIik7XG4gICAgY29uc3QgdGFza0Ryb3Bkb3duRWxlbWVudCA9IGRvbU1hbmFnZXIucXVlcnkoXCIudGFnLWdyb3VwIHVsXCIpO1xuICAgIGNvbnN0IHRhc2tNb2RhbEVsZW1lbnQgPSBkb21NYW5hZ2VyLnF1ZXJ5KFwiLnRhc2stbW9kYWwtd3JhcHBlclwiKTtcbiAgICBjb25zdCB0YXNrTW9kYWxFbGVtZW50cyA9IHtcbiAgICAgICAgbW9kYWw6IGRvbU1hbmFnZXIucXVlcnkoXCIudGFzay1tb2RhbFwiKSxcbiAgICAgICAgY2hlY2tlZDogZG9tTWFuYWdlci5xdWVyeShcIi50YXNrLW1vZGFsLXdyYXBwZXIgLmNoZWNrZWRcIiksXG4gICAgICAgIHRpdGxlOiBkb21NYW5hZ2VyLnF1ZXJ5KFwiLnRhc2stbW9kYWwtd3JhcHBlciAudGl0bGVcIiksXG4gICAgICAgIGRlc2NyaXB0aW9uOiBkb21NYW5hZ2VyLnF1ZXJ5KFwiLnRhc2stbW9kYWwtd3JhcHBlciAuZGVzY3JpcHRpb25cIiksXG4gICAgICAgIHRhZ3M6IGRvbU1hbmFnZXIucXVlcnkoXCIudGFzay1tb2RhbC13cmFwcGVyIC50YWdzXCIpLFxuICAgICAgICBkZWFkbGluZTogZG9tTWFuYWdlci5xdWVyeShcIi50YXNrLW1vZGFsLXdyYXBwZXIgLmRlYWRsaW5lXCIpLFxuICAgICAgICBwcmlvcml0eTogZG9tTWFuYWdlci5xdWVyeShcIi50YXNrLW1vZGFsLXdyYXBwZXIgLnByaW9yaXR5XCIpLFxuICAgIH1cbiAgICBcbiAgICBsZXQgdGFnQWRkRGlzYWJsZVJlYXNvbiA9IFwiXCI7XG5cbiAgICAvLyBwcml2YXRlIG1ldGhvZHNcbiAgICBjb25zdCBjcmVhdGVDaGVja21hcmtFbGVtZW50ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBjaGVja21hcmtFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICAgICAgY29uc3QgdW5jaGVja2VkU1ZHID0gZG9tTWFuYWdlci5jcmVhdGVTVkdFbGVtZW50KHtwYXRoOlwiTTEyLDIwQTgsOCAwIDAsMSA0LDEyQTgsOCAwIDAsMSAxMiw0QTgsOCAwIDAsMSAyMCwxMkE4LDggMCAwLDEgMTIsMjBNMTIsMkExMCwxMCAwIDAsMCAyLDEyQTEwLDEwIDAgMCwwIDEyLDIyQTEwLDEwIDAgMCwwIDIyLDEyQTEwLDEwIDAgMCwwIDEyLDJaXCJ9KTtcbiAgICAgICAgY29uc3QgY2hlY2tlZFNWRyA9IGRvbU1hbmFnZXIuY3JlYXRlU1ZHRWxlbWVudCh7cGF0aDpcIk0xMiAyQzYuNSAyIDIgNi41IDIgMTJTNi41IDIyIDEyIDIyIDIyIDE3LjUgMjIgMTIgMTcuNSAyIDEyIDJNMTIgMjBDNy41OSAyMCA0IDE2LjQxIDQgMTJTNy41OSA0IDEyIDQgMjAgNy41OSAyMCAxMiAxNi40MSAyMCAxMiAyME0xNi41OSA3LjU4TDEwIDE0LjE3TDcuNDEgMTEuNTlMNiAxM0wxMCAxN0wxOCA5TDE2LjU5IDcuNThaXCJ9KTtcbiAgICAgICAgY2hlY2ttYXJrRWxlbWVudC5jbGFzc0xpc3QuYWRkKFwidGFzay1jaGVja1wiKTtcbiAgICAgICAgY2hlY2tlZFNWRy5jbGFzc0xpc3QuYWRkKFwiaGlkZGVuXCIpO1xuICAgICAgICBjaGVja21hcmtFbGVtZW50LmFwcGVuZENoaWxkKHVuY2hlY2tlZFNWRyk7XG4gICAgICAgIGNoZWNrbWFya0VsZW1lbnQuYXBwZW5kQ2hpbGQoY2hlY2tlZFNWRyk7XG4gICAgICAgIHJldHVybiBjaGVja21hcmtFbGVtZW50O1xuICAgIH07XG5cbiAgICBjb25zdCBjcmVhdGVUYWdFbnRyeSA9IHRhZyA9PiB7XG4gICAgICAgIGNvbnN0IHRhZ0VudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICBjb25zdCB0YWdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb25zdCB0YWdOYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgIGNvbnN0IGNvbG9ySWNvbiA9IGRvbU1hbmFnZXIuY3JlYXRlU1ZHRWxlbWVudCh7cGF0aDpcIk0xMiwyQTEwLDEwIDAgMCwwIDIsMTJBMTAsMTAgMCAwLDAgMTIsMjJBMTAsMTAgMCAwLDAgMjIsMTJBMTAsMTAgMCAwLDAgMTIsMlpcIn0pO1xuICAgICAgICB0YWdEaXYuY2xhc3NMaXN0LmFkZChcInRhZ1wiKTtcbiAgICAgICAgdGFnRGl2LmNsYXNzTGlzdC5hZGQoXCJpY29uXCIpO1xuICAgICAgICB0YWdOYW1lLnRleHRDb250ZW50ID0gdGFnLm5hbWU7XG4gICAgICAgIHRhZ0Rpdi5hcHBlbmRDaGlsZChjb2xvckljb24pO1xuICAgICAgICB0YWdEaXYuYXBwZW5kQ2hpbGQodGFnTmFtZSk7XG4gICAgICAgIHRhZ0VudHJ5LmFwcGVuZENoaWxkKHRhZ0Rpdik7XG4gICAgICAgIHJldHVybiB0YWdFbnRyeTtcbiAgICB9XG5cbiAgICBjb25zdCBjcmVhdGVUYXNrRW50cnkgPSB0YXNrID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgY29uc3QgdGFza0luZm9EaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb25zdCBjaGVja21hcmsgPSBjcmVhdGVDaGVja21hcmtFbGVtZW50KCk7XG4gICAgICAgIHRhc2tFbnRyeS5kYXRhc2V0LmlkID0gdGFzay5pZDtcbiAgICAgICAgdGFza0VudHJ5LnN0eWxlID0gXCJtYXJnaW46IDJyZW07XCI7XG4gICAgICAgIHRhc2tFbnRyeS5jbGFzc0xpc3QuYWRkKFwidGFzay1lbnRyeVwiKTtcbiAgICAgICAgc3dhcENoZWNrbWFya0Rpc3BsYXkoY2hlY2ttYXJrLCB0YXNrLmNoZWNrZWQpO1xuICAgICAgICB0YXNrRW50cnkuYXBwZW5kQ2hpbGQoY2hlY2ttYXJrKTtcbiAgICAgICAgdGFza0luZm9EaXYuc3R5bGUgPSBcImRpc3BsYXk6IGdyaWQ7IGdyaWQtdGVtcGxhdGUtY29sdW1uczogYXV0byA2cmVtIDVyZW07IGdyaWQtdGVtcGxhdGUtcm93czogM3JlbSBhdXRvIGF1dG87IGFsaWduLWl0ZW1zOiBjZW50ZXI7XCI7XG4gICAgICAgIC8vIGFkZCBvdGhlciBmaWVsZHMgb2YgdGFza1xuICAgICAgICBjb25zdCBtYWtlRmllbGQgPSAodHlwZSwgY2xhc3NOYW1lLCBzdHlsZSwgdGV4dCk9PntcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlID0gc3R5bGU7XG4gICAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9O1xuICAgICAgICB0YXNrSW5mb0Rpdi5hcHBlbmRDaGlsZChtYWtlRmllbGQoXCJwXCIsIFwidGl0bGVcIiwgXCJncmlkLWFyZWE6IDEvMS8xLzE7IG1hcmdpbi1sZWZ0OiAxcmVtOyBmb250LXNpemU6IDEuNXJlbTsgZm9udC13ZWlnaHQ6IDYwMDtcIiwgdGFzay50aXRsZSkpO1xuICAgICAgICB0YXNrSW5mb0Rpdi5hcHBlbmRDaGlsZChtYWtlRmllbGQoXCJwXCIsIFwiZGVzY3JpcHRpb25cIiwgXCJncmlkLWFyZWE6IDIvMS8yLy0xOyBtYXJnaW4tbGVmdDogMXJlbTtcIiwgdGFzay5kZXNjcmlwdGlvbikpO1xuICAgICAgICB0YXNrSW5mb0Rpdi5hcHBlbmRDaGlsZChtYWtlRmllbGQoXCJwXCIsIFwiZGVhZGxpbmVcIiwgXCJncmlkLWFyZWE6IDEvMi8xLzI7XCIsIHRhc2suZGVhZGxpbmUpKTtcbiAgICAgICAgdGFza0luZm9EaXYuYXBwZW5kQ2hpbGQobWFrZUZpZWxkKFwicFwiLCBcInByaW9yaXR5XCIsXCJncmlkLWFyZWE6IDEvMy8xLzM7XCIsIHRhc2sucHJpb3JpdHkpKTtcbiAgICAgICAgY29uc3QgdGFnR3JvdXAgPSBtYWtlRmllbGQoXCJkaXZcIiwgXCJ0YWctZ3JvdXBcIiwgXCJncmlkLWFyZWE6IDMvMS8zLy0xOyBtYXJnaW4tbGVmdDogMXJlbTtcIiwgXCJcIik7XG4gICAgICAgIC8vIGFkZCB0YWdzXG4gICAgICAgIHRhc2sudGFncy5mb3JFYWNoKHRhZyA9PiB7XG4gICAgICAgICAgICB0YWdHcm91cC5hcHBlbmRDaGlsZChjcmVhdGVUYWdFbnRyeSh0YWcpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRhc2tJbmZvRGl2LmFwcGVuZENoaWxkKHRhZ0dyb3VwKTtcbiAgICAgICAgdGFza0VudHJ5LmFwcGVuZENoaWxkKHRhc2tJbmZvRGl2KTtcbiAgICAgICAgcmV0dXJuIHRhc2tFbnRyeTtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRUYXNrRW50cnkgPSBpZCA9PiB7XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiB0YXNrRW50cnlMaXN0RWxlbWVudC5jaGlsZHJlbikge1xuICAgICAgICAgICAgaWYgKG5vZGUuZGF0YXNldC5pZCA9PSBpZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIGhhbmRsZXMgY2hhbmdpbmcgdGhlIGNoZWNrbWFyayBkaXNwbGF5XG4gICAgY29uc3Qgc3dhcENoZWNrbWFya0Rpc3BsYXkgPSAoY2hlY2ttYXJrRGl2LCBpc0NoZWNrZWQpID0+IHtcbiAgICAgICAgZG9tTWFuYWdlci5zZXRWaXNpYmxlKGNoZWNrbWFya0Rpdi5jaGlsZHJlblswXSwgIWlzQ2hlY2tlZCk7XG4gICAgICAgIGRvbU1hbmFnZXIuc2V0VmlzaWJsZShjaGVja21hcmtEaXYuY2hpbGRyZW5bMV0sIGlzQ2hlY2tlZCk7XG4gICAgfVxuXG5cbiAgICAvLyBwdWJsaWMgbWV0aG9kc1xuICAgIGNvbnN0IHF1ZXJ5U2VsZWN0ZWQgPSAoc2VsZWN0b3JzKSA9PiB7XG4gICAgICAgIGNvbnN0IHNlbGVjdG9yQ291bnQgPSBzZWxlY3RvcnMubGVuZ3RoO1xuICAgICAgICBsZXQgcCA9IFByb21pc2UucmVzb2x2ZShbXSk7XG4gICAgICAgIGZvciAobGV0IGk9MDsgaTxzZWxlY3RvckNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIHAgPSBwLnRoZW4oKGVsZW1lbnRzKT0+e3JldHVybiBlbGVtZW50cy5jb25jYXQoZG9tTWFuYWdlci5xdWVyeShzZWxlY3RvcnNbaV0pKX0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwO1xuICAgIH1cblxuICAgIGNvbnN0IGFkZE5ld1RhZyA9ICh0YWcsIGNsaWNrSGFuZGxlcikgPT4ge1xuICAgICAgICBjb25zdCB0YWdFbGVtZW50ID0gY3JlYXRlVGFnRW50cnkodGFnKTtcbiAgICAgICAgdGFnTGlzdEVsZW1lbnQuYXBwZW5kQ2hpbGQodGFnRWxlbWVudCk7XG4gICAgICAgIHRhZ0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsaWNrSGFuZGxlcik7XG4gICAgfTtcblxuICAgIGNvbnN0IGFkZE5ld1Rhc2sgPSAodGFzaywgY2xpY2tIYW5kbGVyLCBjaGVja0hhbmRsZXIpID0+IHtcbiAgICAgICAgY29uc3QgdGFza0VsZW1lbnQgPSBjcmVhdGVUYXNrRW50cnkodGFzayk7XG4gICAgICAgIHRhc2tFbnRyeUxpc3RFbGVtZW50LmFwcGVuZENoaWxkKHRhc2tFbGVtZW50KTtcbiAgICAgICAgdGFza0VsZW1lbnQuY2hpbGROb2Rlc1swXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2hlY2tIYW5kbGVyKTtcbiAgICAgICAgdGFza0VsZW1lbnQuY2hpbGROb2Rlc1sxXS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY2xpY2tIYW5kbGVyKTtcbiAgICB9XG5cbiAgICBjb25zdCByZW1vdmVUYXNrID0gKGlkKSA9PiB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBnZXRUYXNrRW50cnkoaWQpXG4gICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQ291bGRuJ3QgZmluZCBub2RlIHdpdGggbWF0Y2hpbmcgaWRcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbm9kZS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBjb25zdCBnZW5lcmF0ZVNpZGVNZW51VGFncyA9ICh0YWdzLCBoYW5kbGVyT2ZDbGlja0hhbmRsZXIpID0+IHtcbiAgICAgICAgdGFnTGlzdEVsZW1lbnQucmVwbGFjZUNoaWxkcmVuKCk7XG4gICAgICAgIHRhZ3MuZm9yRWFjaCh0YWc9PntcbiAgICAgICAgICAgIGFkZE5ld1RhZyh0YWcsIGhhbmRsZXJPZkNsaWNrSGFuZGxlcih0YWcpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2VuZXJhdGVIb21lVmlldyA9ICh0YXNrcywgaGFuZGxlck9mQ2xpY2tIYW5kbGVyLCBoYW5kbGVyT2ZDaGVja0hhbmRsZXIpID0+ICB7XG4gICAgICAgIHRhc2tFbnRyeUxpc3RFbGVtZW50LnJlcGxhY2VDaGlsZHJlbigpO1xuICAgICAgICB0YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICAgICAgYWRkTmV3VGFzayh0YXNrLCBoYW5kbGVyT2ZDbGlja0hhbmRsZXIodGFzay5pZCksIGhhbmRsZXJPZkNoZWNrSGFuZGxlcih0YXNrKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGxvYWRUYWdzSW5UYXNrQ3JlYXRpb24gPSAodGFncykgPT4ge1xuICAgICAgICB0YXNrRHJvcGRvd25FbGVtZW50LnJlcGxhY2VDaGlsZHJlbigpO1xuICAgICAgICB0YWdzLmZvckVhY2godGFnID0+IHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBlbGVtZW50XG4gICAgICAgICAgICBjb25zdCBsaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICAgICAgY29uc3QgdGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICAgICAgbGlzdEl0ZW0uY2xhc3NMaXN0LmFkZChcInRhZy1pdGVtXCIpO1xuICAgICAgICAgICAgLy8gc3RvcmUgdGFnIGRhdGEgaW4gZGF0YXNldFxuICAgICAgICAgICAgbGlzdEl0ZW0uZGF0YXNldC5uYW1lID0gdGFnLm5hbWU7XG4gICAgICAgICAgICBsaXN0SXRlbS5kYXRhc2V0LmNvbG9yID0gdGFnLmNvbG9yO1xuICAgICAgICAgICAgaW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcbiAgICAgICAgICAgIGlucHV0Lm5hbWUgPSB0YWcubmFtZTtcbiAgICAgICAgICAgIHRleHQudGV4dENvbnRlbnQgPSB0YWcubmFtZTtcbiAgICAgICAgICAgIGxpc3RJdGVtLmFwcGVuZENoaWxkKGlucHV0KTtcbiAgICAgICAgICAgIGxpc3RJdGVtLmFwcGVuZENoaWxkKHRleHQpO1xuICAgICAgICAgICAgdGFza0Ryb3Bkb3duRWxlbWVudC5hcHBlbmQobGlzdEl0ZW0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBsb2FkVGFza0luTW9kYWwgPSAodGFzaykgPT4ge1xuICAgICAgICAvLyBoaWRlIHRoZSBtb2RhbCBpdHNlbGYgd2hpbGUgbG9hZGluZ1xuICAgICAgICBkb21NYW5hZ2VyLnNldFZpc2libGUodGFza01vZGFsRWxlbWVudHMubW9kYWwsIGZhbHNlKTtcbiAgICAgICAgdGFza01vZGFsRWxlbWVudHMudGFncy5yZXBsYWNlQ2hpbGRyZW4oKTtcbiAgICAgICAgdGFza01vZGFsRWxlbWVudHMubW9kYWwuZGF0YXNldC5pZCA9IHRhc2suaWQ7XG4gICAgICAgIC8vIHNldCB0ZXh0IGZpZWxkc1xuICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIGluIHRhc2spIHtcbiAgICAgICAgICAgIGlmIChmaWVsZCA9PSBcImlkXCIgfHwgZmllbGQgPT0gXCJ0YWdzXCIgfHwgZmllbGQgPT0gXCJjaGVja2VkXCIpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdGFza01vZGFsRWxlbWVudHNbZmllbGRdLnRleHRDb250ZW50ID0gdGFza1tmaWVsZF07XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2V0IGNoZWNrIGljb25cbiAgICAgICAgc3dhcENoZWNrbWFya0Rpc3BsYXkodGFza01vZGFsRWxlbWVudHMuY2hlY2tlZCwgdGFzay5jaGVja2VkKTtcbiAgICAgICAgLy8gc2V0IHRhZ3NcbiAgICAgICAgdGFzay50YWdzLmZvckVhY2godGFnID0+IHtcbiAgICAgICAgICAgIHRhc2tNb2RhbEVsZW1lbnRzLnRhZ3MuYXBwZW5kQ2hpbGQoY3JlYXRlVGFnRW50cnkodGFnKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGRpc3BsYXkgdGhlIG1vZGFsIG9uY2UgbG9hZGVkXG4gICAgICAgIGRvbU1hbmFnZXIuc2V0VmlzaWJsZSh0YXNrTW9kYWxFbGVtZW50cy5tb2RhbCk7XG4gICAgfVxuXG4gICAgY29uc3QgZXh0cmFjdFRhZyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmZvcm1zW1wibmV3VGFnRm9ybVwiXTtcbiAgICAgICAgcmV0dXJuIHtuYW1lOiBmb3JtW1wibmFtZVwiXS52YWx1ZSwgY29sb3I6IGZvcm1bXCJjb2xvclwiXX1cbiAgICB9XG5cbiAgICBjb25zdCBleHRyYWN0VGFza0Zyb21DcmVhdGlvbiA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGFzayA9IHtpZDogMCwgY2hlY2tlZDogZmFsc2V9O1xuICAgICAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQuZm9ybXNbXCJuZXdUYXNrRm9ybVwiXTtcbiAgICAgICAgY29uc3QgZmllbGRzID0gW1widGl0bGVcIiwgXCJkZXNjcmlwdGlvblwiLCBcImRlYWRsaW5lXCIsIFwicHJpb3JpdHlcIl07XG4gICAgICAgIGZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHRhc2tbZmllbGRdID0gZm9ybVtmaWVsZF0udmFsdWUpO1xuICAgICAgICBkb21NYW5hZ2VyLnF1ZXJ5QWxsKFwiLnRhc2stZ3JvdXBcIilcbiAgICAgICAgdGFzay50YWdzID0gW107XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiB0YXNrRHJvcGRvd25FbGVtZW50LmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlblswXS5jaGVja2VkKSB0YXNrLnRhZ3MucHVzaCh7bmFtZTogbm9kZS5kYXRhc2V0Lm5hbWUsIGNvbG9yOiBub2RlLmRhdGFzZXQuY29sb3J9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFzaztcbiAgICB9XG5cbiAgICBjb25zdCBleHRyYWN0SWRPZkN1cnJlbnRUYXNrID0gKCkgPT4gdGFza01vZGFsRWxlbWVudHMubW9kYWwuZGF0YXNldC5pZDtcblxuICAgIGNvbnN0IGNoZWNrT2ZmVGFzayA9IChpZCwgY2hlY2tlZCkgPT4ge1xuICAgICAgICBjb25zdCBub2RlID0gZ2V0VGFza0VudHJ5KGlkKVxuICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkNvdWxkbid0IGZpbmQgbm9kZSB3aXRoIG1hdGNoaW5nIGlkXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHN3YXBDaGVja21hcmtEaXNwbGF5KG5vZGUuY2hpbGROb2Rlc1swXSwgY2hlY2tlZCk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3BlblRhZ01vZGFsID0gKCkgPT4ge1xuICAgICAgICBkb21NYW5hZ2VyLnNldFZpc2libGUodGFnTW9kYWxFbGVtZW50KTtcbiAgICB9XG5cbiAgICBjb25zdCBjbG9zZVRhZ01vZGFsID0gKCkgPT4ge1xuICAgICAgICBkb21NYW5hZ2VyLnNldFZpc2libGUodGFnTW9kYWxFbGVtZW50LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY29uc3Qgb3BlblRhc2tDcmVhdGlvbiA9ICgpPT4ge1xuICAgICAgICBkb21NYW5hZ2VyLnNldFZpc2libGUodGFza0NyZWF0aW9uRWxlbWVudCk7XG4gICAgfVxuICAgIGNvbnN0IGNsb3NlVGFza0NyZWF0aW9uID0gKCk9PiB7XG4gICAgICAgIGRvbU1hbmFnZXIuc2V0VmlzaWJsZSh0YXNrQ3JlYXRpb25FbGVtZW50LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgY29uc3QgdG9nZ2xlVGFza0xpc3REcm9wZG93biA9ICgpID0+IHtcbiAgICAgICAgZG9tTWFuYWdlci5zZXRWaXNpYmxlKHRhc2tEcm9wZG93bkVsZW1lbnQsIHRhc2tEcm9wZG93bkVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwiaGlkZGVuXCIpKTtcbiAgICB9XG5cbiAgICBjb25zdCBvcGVuVGFza01vZGFsID0gKCkgPT4ge1xuICAgICAgICBkb21NYW5hZ2VyLnNldFZpc2libGUodGFza01vZGFsRWxlbWVudCk7XG4gICAgfVxuXG4gICAgY29uc3QgY2xvc2VUYXNrTW9kYWwgPSAoKSA9PiB7XG4gICAgICAgIGRvbU1hbmFnZXIuc2V0VmlzaWJsZSh0YXNrTW9kYWxFbGVtZW50LCBmYWxzZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgXG4gICAgICAgIHF1ZXJ5U2VsZWN0ZWQsIFxuICAgICAgICBhZGROZXdUYWcsXG4gICAgICAgIGFkZE5ld1Rhc2ssXG4gICAgICAgIHJlbW92ZVRhc2ssXG4gICAgICAgIGdlbmVyYXRlU2lkZU1lbnVUYWdzLCBcbiAgICAgICAgZ2VuZXJhdGVIb21lVmlldyxcbiAgICAgICAgZXh0cmFjdFRhZyxcbiAgICAgICAgZXh0cmFjdElkT2ZDdXJyZW50VGFzayxcbiAgICAgICAgZXh0cmFjdFRhc2tGcm9tQ3JlYXRpb24sXG4gICAgICAgIGNoZWNrT2ZmVGFzayxcbiAgICAgICAgbG9hZFRhZ3NJblRhc2tDcmVhdGlvbixcbiAgICAgICAgbG9hZFRhc2tJbk1vZGFsLFxuICAgICAgICB0b2dnbGVUYXNrTGlzdERyb3Bkb3duLFxuICAgICAgICBvcGVuVGFnTW9kYWwsXG4gICAgICAgIGNsb3NlVGFnTW9kYWwsXG4gICAgICAgIG9wZW5UYXNrQ3JlYXRpb24sXG4gICAgICAgIGNsb3NlVGFza0NyZWF0aW9uLFxuICAgICAgICBvcGVuVGFza01vZGFsLFxuICAgICAgICBjbG9zZVRhc2tNb2RhbFxuICAgIH1cbiAgICBcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHZpZXc7IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHN0eWxlIGZyb20gXCIuL3N0eWxlLmNzc1wiO1xuaW1wb3J0IG1vZGVsIGZyb20gXCIuL21vZGVsLmpzXCI7XG5pbXBvcnQgdmlldyBmcm9tIFwiLi92aWV3LmpzXCI7XG5cbi8vIG1haW5cbmNvbnN0IHVzZXJEYXRhID0gbW9kZWwubG9hZFVzZXJEYXRhKCk7XG5cbi8vIGR5bmFtaWMgY2xpY2sgZXZlbnRzXG5jb25zdCB0YWdFbnRyeUhhbmRsZXIgPSAodGFnKSA9PiAoKCk9Pnt9KTtcbmNvbnN0IHRhc2tFbnRyeUhhbmRsZXIgPSAoaWQpPT4oKCk9PntidXR0b25FdmVudC5vcGVuVGFzayhtb2RlbC5nZXRUYXNrQnlJZChpZCkpfSk7XG5jb25zdCB0YXNrQ2hlY2tIYW5kbGVyID0gKHRhc2spPT4oKCk9PntcbiAgICB2aWV3LmNoZWNrT2ZmVGFzayh0YXNrLmlkLCBtb2RlbC50b2dnbGVDaGVja09mZlRhc2sodGFzay5pZCkpO1xufSlcblxudmlldy5nZW5lcmF0ZVNpZGVNZW51VGFncyh1c2VyRGF0YS50YWdzLCB0YWdFbnRyeUhhbmRsZXIpO1xudmlldy5nZW5lcmF0ZUhvbWVWaWV3KHVzZXJEYXRhLnRhc2tzLCB0YXNrRW50cnlIYW5kbGVyLCB0YXNrQ2hlY2tIYW5kbGVyKTtcblxuY29uc3QgYnV0dG9uRXZlbnQgPSB7XG4gICAgZ29Ub0hvbWU6ICgpPT57IFxuICAgICAgICB2aWV3LmdlbmVyYXRlSG9tZVZpZXcobW9kZWwuZ2V0RGF0YUNvcHkoKS50YXNrcywgdGFza0VudHJ5SGFuZGxlciwgdGFza0NoZWNrSGFuZGxlcik7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTG9hZCBob21lIHZpZXcuXCIpXG4gICAgfSxcbiAgICBhZGRUYWc6ICgpPT57XG4gICAgICAgIHZpZXcub3BlblRhZ01vZGFsKCk7XG4gICAgfSxcbiAgICBjbG9zZVRhZ01vZGFsOiAoKT0+e1xuICAgICAgICB2aWV3LmNsb3NlVGFnTW9kYWwoKTtcbiAgICB9LFxuICAgIHN1Ym1pdFRhZzogKCk9PntcbiAgICAgICAgY29uc3QgdGFnID0gbW9kZWwuYWRkTmV3VGFnKHZpZXcuZXh0cmFjdFRhZygpKTtcbiAgICAgICAgdmlldy5hZGROZXdUYWcodGFnLCAoKT0+e30pO1xuICAgICAgICB2aWV3LmNsb3NlVGFnTW9kYWwoKTtcbiAgICB9LFxuICAgIGNsZWFyQWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKG1vZGVsLnJlc2V0RGF0YSgpKVxuICAgICAgICAudGhlbiggbmV3RGF0YSA9PiB7XG4gICAgICAgICAgICB2aWV3LmdlbmVyYXRlU2lkZU1lbnVUYWdzKG5ld0RhdGEudGFncywgdGFnRW50cnlIYW5kbGVyKTtcbiAgICAgICAgICAgIHZpZXcuZ2VuZXJhdGVIb21lVmlldyhuZXdEYXRhLnRhc2tzLCB0YXNrRW50cnlIYW5kbGVyLCB0YXNrQ2hlY2tIYW5kbGVyKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICBuZXdUYXNrOiAoKT0+e1xuICAgICAgICB2aWV3LmxvYWRUYWdzSW5UYXNrQ3JlYXRpb24obW9kZWwuZ2V0RGF0YUNvcHkoKS50YWdzKTtcbiAgICAgICAgdmlldy5vcGVuVGFza0NyZWF0aW9uKCk7XG4gICAgfSxcbiAgICB0b2dnbGVTZWxlY3RUYWc6ICgpID0+IHtcbiAgICAgICAgdmlldy50b2dnbGVUYXNrTGlzdERyb3Bkb3duKCk7XG4gICAgfSxcbiAgICBjbG9zZVRhc2tDcmVhdGlvbjogKCk9PntcbiAgICAgICAgdmlldy5jbG9zZVRhc2tDcmVhdGlvbigpO1xuICAgIH0sXG4gICAgY3JlYXRlVGFzazogKCk9PntcbiAgICAgICAgY29uc3QgdGFzayA9IG1vZGVsLmFkZE5ld1Rhc2sodmlldy5leHRyYWN0VGFza0Zyb21DcmVhdGlvbigpKTtcbiAgICAgICAgdmlldy5hZGROZXdUYXNrKHRhc2ssIHRhc2tFbnRyeUhhbmRsZXIodGFzayksIHRhc2tDaGVja0hhbmRsZXIodGFzaykpO1xuICAgICAgICB2aWV3LmNsb3NlVGFza0NyZWF0aW9uKCk7XG4gICAgfSxcbiAgICBvcGVuVGFzazogZnVuY3Rpb24odGFzaykge1xuICAgICAgICB2aWV3Lm9wZW5UYXNrTW9kYWwodGFzayk7XG4gICAgICAgIHZpZXcubG9hZFRhc2tJbk1vZGFsKHRhc2spO1xuICAgIH0sXG4gICAgdXBkYXRlVGFzazogKCk9PiB7XG4gICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgbmV3VGFnSW5mbyA9IHZpZXcuZ2V0VGFza0RldGFpbHMoKTtcbiAgICAgICAgbW9kZWwudXBkYXRlVGFnKG5ld1RhZ0luZm8uaWQsIG5ld1RhZ0luZm8pO1xuICAgICAgICB2aWV3LmNsb3NlVGFza01vZGFsKCk7XG4gICAgfSxcbiAgICBjbG9zZVRhc2s6ICgpPT57XG4gICAgICAgIHZpZXcuY2xvc2VUYXNrTW9kYWwoKTtcbiAgICB9LFxuICAgIHJlbW92ZVRhc2s6ICgpPT57XG4gICAgICAgIGNvbnN0IGlkID0gdmlldy5leHRyYWN0SWRPZkN1cnJlbnRUYXNrKCk7XG4gICAgICAgIG1vZGVsLnJlbW92ZVRhc2soaWQpO1xuICAgICAgICB2aWV3LnJlbW92ZVRhc2soaWQpO1xuICAgICAgICB2aWV3LmNsb3NlVGFza01vZGFsKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKG1vZGVsLmdldERhdGFDb3B5KCkpO1xuICAgIH1cbn07XG5jb25zdCBzZWxlY3RvclRvRXZlbnRNYXAgPSBuZXcgTWFwKFtcbiAgICBbXCIubWVudS10aW1lLW9wdGlvbnMgbGk6Zmlyc3QtY2hpbGRcIiwgYnV0dG9uRXZlbnQuZ29Ub0hvbWVdLFxuICAgIFtcIi50YWctYWRkXCIsIGJ1dHRvbkV2ZW50LmFkZFRhZ10sXG4gICAgW1wiYnV0dG9uLmRhdGEtY2xlYXJcIiwgYnV0dG9uRXZlbnQuY2xlYXJBbGxdLFxuICAgIFtcIm1haW4gYnV0dG9uLmFkZFwiLCBidXR0b25FdmVudC5uZXdUYXNrXSxcbiAgICBbXCIudGFzay1jcmVhdGlvbiAudGFnLWdyb3VwIHBcIiwgYnV0dG9uRXZlbnQudG9nZ2xlU2VsZWN0VGFnXSxcbiAgICBbXCIudGFzay1jcmVhdGlvbiAuY2FuY2VsXCIsIGJ1dHRvbkV2ZW50LmNsb3NlVGFza0NyZWF0aW9uXSxcbiAgICBbXCIudGFzay1jcmVhdGlvbiAuc3VibWl0XCIsIGJ1dHRvbkV2ZW50LmNyZWF0ZVRhc2tdLFxuICAgIFtcIi50YXNrLW1vZGFsIGJ1dHRvbi5jbG9zZVwiLCBidXR0b25FdmVudC5jbG9zZVRhc2tdLFxuICAgIFtcIi50YXNrLW1vZGFsIC5yZW1vdmVcIiwgYnV0dG9uRXZlbnQucmVtb3ZlVGFza10sXG4gICAgW1wiLnRhZy1tb2RhbCAuY2FuY2VsXCIsIGJ1dHRvbkV2ZW50LmNsb3NlVGFnTW9kYWxdLFxuICAgIFtcIi50YWctbW9kYWwgLnN1Ym1pdFwiLCBidXR0b25FdmVudC5zdWJtaXRUYWddLFxuICAgIFtcIi50YWctbW9kYWwgYnV0dG9uLmNsb3NlXCIsIGJ1dHRvbkV2ZW50LmNsb3NlVGFnTW9kYWxdLFxuXSk7XG5cbi8vIG1hcCBidXR0b24gY2xpY2sgZXZlbnQgdG8gZWFjaCBzdGF0aWMgYnV0dG9uXG5jb25zdCBidXR0b25TZWxlY3RvcnMgPSBBcnJheS5mcm9tKHNlbGVjdG9yVG9FdmVudE1hcCwgZW50cnkgPT4gZW50cnlbMF0pO1xudmlldy5xdWVyeVNlbGVjdGVkKGJ1dHRvblNlbGVjdG9ycykudGhlbihidXR0b25FbGVtZW50cz0+e1xuICAgIGZvciAobGV0IGk9MDsgaTxidXR0b25TZWxlY3RvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYnV0dG9uRWxlbWVudHNbaV0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHNlbGVjdG9yVG9FdmVudE1hcC5nZXQoYnV0dG9uU2VsZWN0b3JzW2ldKSk7XG4gICAgfVxufSk7XG5cbmNvbnNvbGUubG9nKHVzZXJEYXRhKTsgLy8gbG9jYWwgZGF0YSBkZWJ1Z1xuXG5cbi8qXG5DdXJyZW50IFRPRE86XG4tIENoZWNrL3VuY2hlY2sgaW50ZXJhY3Rpb24gb24gZW50cnkgYW5kIHRhc2sgbW9kYWwuIEludGVyYWN0aW9uIGlzIHNhdmVkIGxvY2FsbHkuXG5cbkZ1bmN0aW9uYWwgVE9ET3M6XG4tIENsaWNraW5nIG9uIHRoZSB0YXNrIGZpZWxkIGFsbG93cyB5b3UgdG8gbW9kaWZ5IHRoZSB0YXNrXG4tIFVwZGF0aW5nIGEgZmllbGQgaW4gdGhlIHRhc2sgbW9kYWwgdXBkYXRlcyB0aGUgdGFzayBvbiB0aGUgaG9tZSBwYWdlXG4tIFRhc2sgaXMgc2F2ZWQgdG8gbG9jYWwgdXBvbiBjcmVhdGluZyBvbmUgYW5kIHVwZGF0aW5nIGEgZmllbGRcblxuU3R5bGUgVE9ET3M6XG4tIERpc3BsYXkgcGVuY2lsIGljb24gb24gaG92ZXIgb3ZlciBmaWVsZFxuLSBNYWtlIHRoaXMgcmVzcG9uc2l2ZSBmb3IgbmFycm93IHdpbmRvd3Ncbi0gRml4IGNpcmNsZSBpY29uIG9uIHRhZ3NcbiovIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwicXVlcnkiLCJzZWxlY3RvciIsInF1ZXJ5QWxsIiwicXVlcnlTZWxlY3RvckFsbCIsImNyZWF0ZVNWR0VsZW1lbnQiLCJzdmciLCJjcmVhdGVFbGVtZW50TlMiLCJwYXRoIiwic2V0VmlzaWJsZSIsInZpc2libGUiLCJlbGVtZW50Q2xhc3NMaXN0IiwicXVlcnlJZlNlbGVjdG9yIiwiY2xhc3NMaXN0IiwiYWRkIiwibW92ZURvd24iLCJzZXRDbGljayIsImVsZW1lbnRTZWxlY3RvciIsImNhbGxiYWNrIiwiYWRkRXZlbnRMaXN0ZW5lciIsImFkZEVudHJ5T2ZUZW1wbGF0ZSIsInRlbXBsYXRlU2VsZWN0b3IiLCJjb250YWluZXJTZWxlY3RvciIsImVudHJ5IiwiY2xvbmVOb2RlIiwiY29udGFpbmVyIiwiYWRkVGVtcG9yYXJ5SW5wdXQiLCJpbnB1dFN0eWxlIiwiaW5wdXQiLCJzZWxlY3QiLCJjb25zb2xlIiwibG9nIiwic3dhcElucHV0V2l0aFRleHQiLCJ0ZXh0U2VsZWN0b3IiLCJyZW1vdmVJbnB1dCIsInRleHQiLCJ0ZXh0Q29udGVudCIsInZhbHVlIiwiZWxlbWVudEV4aXN0cyIsInNhdmUiLCJ0YXJnZXREYXRhIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsIndhcm4iLCJjbGVhciIsImhhc0V4aXN0aW5nRGF0YSIsImdldERhdGFDb3B5IiwicGFyc2UiLCJpbml0aWFsRGF0YSIsInZlcnNpb24iLCJ1c2VyIiwidGFza3MiLCJjaGVja2VkIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImRlYWRsaW5lIiwicHJpb3JpdHkiLCJ0YWdzIiwibmFtZSIsImNvbG9yIiwidGFnQ29sb3JzIiwic2Vzc2lvbkRhdGEiLCJzYXZlVG9Mb2NhbCIsImxvYWRVc2VyRGF0YSIsInByZXZpb3VzRGF0YSIsImdldFRhc2tCeUlkIiwiZmluZCIsInRhc2siLCJhZGROZXdUYWciLCJ0YWciLCJlcnJvciIsImFkZE5ld1Rhc2siLCJ0b2dnbGVDaGVja09mZlRhc2siLCJpbmRleE9mIiwicmVtb3ZlVGFzayIsInJlc2V0RGF0YSIsInRhc2tFbnRyeUxpc3RFbGVtZW50IiwidGFnTGlzdEVsZW1lbnQiLCJ0YWdNb2RhbEVsZW1lbnQiLCJ0YXNrQ3JlYXRpb25FbGVtZW50IiwidGFza0Ryb3Bkb3duRWxlbWVudCIsInRhc2tNb2RhbEVsZW1lbnQiLCJ0YXNrTW9kYWxFbGVtZW50cyIsIm1vZGFsIiwiY3JlYXRlVGFnRW50cnkiLCJ0YWdFbnRyeSIsInRhZ0RpdiIsInRhZ05hbWUiLCJjb2xvckljb24iLCJnZXRUYXNrRW50cnkiLCJub2RlIiwiY2hpbGRyZW4iLCJkYXRhc2V0Iiwic3dhcENoZWNrbWFya0Rpc3BsYXkiLCJjaGVja21hcmtEaXYiLCJpc0NoZWNrZWQiLCJjbGlja0hhbmRsZXIiLCJ0YWdFbGVtZW50IiwiY2hlY2tIYW5kbGVyIiwidGFza0VsZW1lbnQiLCJ0YXNrRW50cnkiLCJ0YXNrSW5mb0RpdiIsImNoZWNrbWFyayIsImNoZWNrbWFya0VsZW1lbnQiLCJ1bmNoZWNrZWRTVkciLCJjaGVja2VkU1ZHIiwiY3JlYXRlQ2hlY2ttYXJrRWxlbWVudCIsIm1ha2VGaWVsZCIsInR5cGUiLCJjbGFzc05hbWUiLCJ0YWdHcm91cCIsImZvckVhY2giLCJjcmVhdGVUYXNrRW50cnkiLCJjaGlsZE5vZGVzIiwicXVlcnlTZWxlY3RlZCIsInNlbGVjdG9ycyIsInNlbGVjdG9yQ291bnQiLCJwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiZWxlbWVudHMiLCJnZW5lcmF0ZVNpZGVNZW51VGFncyIsImhhbmRsZXJPZkNsaWNrSGFuZGxlciIsInJlcGxhY2VDaGlsZHJlbiIsImdlbmVyYXRlSG9tZVZpZXciLCJoYW5kbGVyT2ZDaGVja0hhbmRsZXIiLCJleHRyYWN0VGFnIiwiZm9ybSIsImZvcm1zIiwiZXh0cmFjdElkT2ZDdXJyZW50VGFzayIsImV4dHJhY3RUYXNrRnJvbUNyZWF0aW9uIiwiZmllbGQiLCJjaGVja09mZlRhc2siLCJsb2FkVGFnc0luVGFza0NyZWF0aW9uIiwibGlzdEl0ZW0iLCJhcHBlbmQiLCJsb2FkVGFza0luTW9kYWwiLCJ0b2dnbGVUYXNrTGlzdERyb3Bkb3duIiwiY29udGFpbnMiLCJvcGVuVGFnTW9kYWwiLCJjbG9zZVRhZ01vZGFsIiwib3BlblRhc2tDcmVhdGlvbiIsImNsb3NlVGFza0NyZWF0aW9uIiwib3BlblRhc2tNb2RhbCIsImNsb3NlVGFza01vZGFsIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsInVzZXJEYXRhIiwibW9kZWwiLCJ0YWdFbnRyeUhhbmRsZXIiLCJ0YXNrRW50cnlIYW5kbGVyIiwiYnV0dG9uRXZlbnQiLCJvcGVuVGFzayIsInRhc2tDaGVja0hhbmRsZXIiLCJ2aWV3IiwiZ29Ub0hvbWUiLCJhZGRUYWciLCJzdWJtaXRUYWciLCJjbGVhckFsbCIsIm5ld0RhdGEiLCJuZXdUYXNrIiwidG9nZ2xlU2VsZWN0VGFnIiwiY3JlYXRlVGFzayIsInVwZGF0ZVRhc2siLCJjbG9zZVRhc2siLCJzZWxlY3RvclRvRXZlbnRNYXAiLCJNYXAiLCJidXR0b25TZWxlY3RvcnMiLCJBcnJheSIsImZyb20iLCJidXR0b25FbGVtZW50cyJdLCJzb3VyY2VSb290IjoiIn0=