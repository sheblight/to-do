(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>i});var r=t(537),o=t.n(r),a=t(645),A=t.n(a)()(o());A.push([n.id,":root {\n    --body-color: #526368;\n    --sub-color: #1e2f39;\n    --light-sub-color: #405258;\n    --accent-color: #968a7d;\n    --dark-accent-color: #806742;\n    --text-color: #e4e1cf;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\n.hidden {\n    display: none !important;\n}\n\nbody {\n    display: grid;\n    grid-template-columns: 15rem 1fr;\n    grid-template-rows: 3.5rem calc(100vh - 3.5rem);\n    background-color: var(--body-color);\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\nli {\n    display: flex;\n    list-style: none;\n    padding: 0.5em 0 0.5em 2em;\n}\n\n/* preceding icon classes */\n.icon {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\nsvg {\n    width: 2em;\n    height: 2em;\n}\n\n.tag svg {\n    width: 1em;\n    height: 1em;\n}\n\n/* header */\nheader {\n    grid-area: 1/1/1/3;\n    background-color: var(--sub-color);\n}\n\n/* side menu*/\nnav {\n    display: grid;\n    grid-template-columns: auto;\n    grid-template-rows: 2rem auto 3rem 3rem 1fr 5rem;\n    padding-left: 2rem;\n    background-color: var(--light-sub-color);\n}\n\nnav .icon {\n    border: none;\n    background-color: transparent;\n    font-size: 1rem;\n    font-weight: bold;\n    color: var(--text-color);\n    fill: var(--text-color);\n}\n\n.menu-time-options li {\n    padding: 0;\n}\n\nnav input {\n    padding: 0.5rem;\n    width: 60%;  \n    color:var(--text-color)\n}\n\nnav .tag p {\n    width: 60%;\n}\n\n/* main content */\nmain {\n    padding: 2rem 4rem;\n    overflow: auto;\n}\n\ninput {\n    border: none;\n    background-color: transparent;\n}\n\n.divider {\n    border: 2px solid var(--accent-color);\n}\n\n.task-initial-entry {\n    display: grid;\n    grid-template-columns: 7rem 8rem 7rem auto 6rem 6rem;\n    grid-template-rows: 3rem 3rem 3rem;\n    border: 3px solid var(--sub-color);\n    border-radius: 6px;\n    background-color: rgb(11 22 33 / 44%);\n    \n}\n\n.task-initial-entry input::placeholder {\n    color: var(--text-color);\n}\n\n.task-initial-entry select, .task-initial-entry input[type=date] {\n    margin: 6px;\n    border: 2px solid var(--text-color);\n    border-radius: 6px;\n    background-color: rgba(189, 171, 171, 0.507);\n    color: var(--text-color);\n}\n\n.task-initial-entry option {\n    background-color: var(--sub-color);\n    color: var(--text-color);\n}\n\n\n.task-initial-entry button {\n    margin: 6px;\n    border: none;\n    border-radius: 6px;\n}\n\n.task-entry {\n    display: grid;\n    grid-template-columns: 2rem auto 5rem;\n    grid-template-rows: 2rem 2rem;\n    color: var(--text-color);\n}\n\n.task-entry button {\n    grid-area: 1/1/3/1;\n    border: none;\n    fill: var(--sub-color);\n    background-color: transparent;\n}\n\n.tag-group {\n    display: flex;\n    gap: 0.5rem;\n    margin-left: 1rem;\n}\n\nmain .icon {\n    border: none;\n    background-color: transparent;\n    font-size: 1rem;\n    font-weight: bold;\n    color: var(--text-color);\n    fill: var(--text-color);\n}\n\n\n/* task modal */\n.task-modal-wrapper {\n    position:fixed;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgba(0,0,0,0.3);\n}\n\n.task-modal {\n    position: inherit;\n    --modal-width: 300px;\n    --modal-height: 300px;\n    width: var(--modal-width);\n    height: var(--modal-height);\n    bottom: calc(50% - var(--modal-height)/2);\n    right: calc(50% - var(--modal-width)/2);\n    background-color: var(--accent-color);\n    padding: 3rem;\n}\n\n.close {\n    position: absolute;\n    right: 0.5rem;\n    top: 0.5rem;\n    background-color: transparent;\n    border: none;\n    padding: 0;\n}\n\n.task-modal input, .task-modal textarea {\n    background-color: transparent;\n}\n\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,qBAAqB;IACrB,oBAAoB;IACpB,0BAA0B;IAC1B,uBAAuB;IACvB,4BAA4B;IAC5B,qBAAqB;AACzB;;AAEA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,aAAa;IACb,gCAAgC;IAChC,+CAA+C;IAC/C,mCAAmC;IACnC,4DAA4D;AAChE;;AAEA;IACI,aAAa;IACb,gBAAgB;IAChB,0BAA0B;AAC9B;;AAEA,2BAA2B;AAC3B;IACI,aAAa;IACb,mBAAmB;IACnB,WAAW;AACf;;AAEA;IACI,UAAU;IACV,WAAW;AACf;;AAEA;IACI,UAAU;IACV,WAAW;AACf;;AAEA,WAAW;AACX;IACI,kBAAkB;IAClB,kCAAkC;AACtC;;AAEA,aAAa;AACb;IACI,aAAa;IACb,2BAA2B;IAC3B,gDAAgD;IAChD,kBAAkB;IAClB,wCAAwC;AAC5C;;AAEA;IACI,YAAY;IACZ,6BAA6B;IAC7B,eAAe;IACf,iBAAiB;IACjB,wBAAwB;IACxB,uBAAuB;AAC3B;;AAEA;IACI,UAAU;AACd;;AAEA;IACI,eAAe;IACf,UAAU;IACV;AACJ;;AAEA;IACI,UAAU;AACd;;AAEA,iBAAiB;AACjB;IACI,kBAAkB;IAClB,cAAc;AAClB;;AAEA;IACI,YAAY;IACZ,6BAA6B;AACjC;;AAEA;IACI,qCAAqC;AACzC;;AAEA;IACI,aAAa;IACb,oDAAoD;IACpD,kCAAkC;IAClC,kCAAkC;IAClC,kBAAkB;IAClB,qCAAqC;;AAEzC;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,WAAW;IACX,mCAAmC;IACnC,kBAAkB;IAClB,4CAA4C;IAC5C,wBAAwB;AAC5B;;AAEA;IACI,kCAAkC;IAClC,wBAAwB;AAC5B;;;AAGA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,qCAAqC;IACrC,6BAA6B;IAC7B,wBAAwB;AAC5B;;AAEA;IACI,kBAAkB;IAClB,YAAY;IACZ,sBAAsB;IACtB,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,WAAW;IACX,iBAAiB;AACrB;;AAEA;IACI,YAAY;IACZ,6BAA6B;IAC7B,eAAe;IACf,iBAAiB;IACjB,wBAAwB;IACxB,uBAAuB;AAC3B;;;AAGA,eAAe;AACf;IACI,cAAc;IACd,YAAY;IACZ,aAAa;IACb,iCAAiC;AACrC;;AAEA;IACI,iBAAiB;IACjB,oBAAoB;IACpB,qBAAqB;IACrB,yBAAyB;IACzB,2BAA2B;IAC3B,yCAAyC;IACzC,uCAAuC;IACvC,qCAAqC;IACrC,aAAa;AACjB;;AAEA;IACI,kBAAkB;IAClB,aAAa;IACb,WAAW;IACX,6BAA6B;IAC7B,YAAY;IACZ,UAAU;AACd;;AAEA;IACI,6BAA6B;AACjC",sourcesContent:[":root {\n    --body-color: #526368;\n    --sub-color: #1e2f39;\n    --light-sub-color: #405258;\n    --accent-color: #968a7d;\n    --dark-accent-color: #806742;\n    --text-color: #e4e1cf;\n}\n\n* {\n    margin: 0;\n    padding: 0;\n}\n\n.hidden {\n    display: none !important;\n}\n\nbody {\n    display: grid;\n    grid-template-columns: 15rem 1fr;\n    grid-template-rows: 3.5rem calc(100vh - 3.5rem);\n    background-color: var(--body-color);\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n}\n\nli {\n    display: flex;\n    list-style: none;\n    padding: 0.5em 0 0.5em 2em;\n}\n\n/* preceding icon classes */\n.icon {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\nsvg {\n    width: 2em;\n    height: 2em;\n}\n\n.tag svg {\n    width: 1em;\n    height: 1em;\n}\n\n/* header */\nheader {\n    grid-area: 1/1/1/3;\n    background-color: var(--sub-color);\n}\n\n/* side menu*/\nnav {\n    display: grid;\n    grid-template-columns: auto;\n    grid-template-rows: 2rem auto 3rem 3rem 1fr 5rem;\n    padding-left: 2rem;\n    background-color: var(--light-sub-color);\n}\n\nnav .icon {\n    border: none;\n    background-color: transparent;\n    font-size: 1rem;\n    font-weight: bold;\n    color: var(--text-color);\n    fill: var(--text-color);\n}\n\n.menu-time-options li {\n    padding: 0;\n}\n\nnav input {\n    padding: 0.5rem;\n    width: 60%;  \n    color:var(--text-color)\n}\n\nnav .tag p {\n    width: 60%;\n}\n\n/* main content */\nmain {\n    padding: 2rem 4rem;\n    overflow: auto;\n}\n\ninput {\n    border: none;\n    background-color: transparent;\n}\n\n.divider {\n    border: 2px solid var(--accent-color);\n}\n\n.task-initial-entry {\n    display: grid;\n    grid-template-columns: 7rem 8rem 7rem auto 6rem 6rem;\n    grid-template-rows: 3rem 3rem 3rem;\n    border: 3px solid var(--sub-color);\n    border-radius: 6px;\n    background-color: rgb(11 22 33 / 44%);\n    \n}\n\n.task-initial-entry input::placeholder {\n    color: var(--text-color);\n}\n\n.task-initial-entry select, .task-initial-entry input[type=date] {\n    margin: 6px;\n    border: 2px solid var(--text-color);\n    border-radius: 6px;\n    background-color: rgba(189, 171, 171, 0.507);\n    color: var(--text-color);\n}\n\n.task-initial-entry option {\n    background-color: var(--sub-color);\n    color: var(--text-color);\n}\n\n\n.task-initial-entry button {\n    margin: 6px;\n    border: none;\n    border-radius: 6px;\n}\n\n.task-entry {\n    display: grid;\n    grid-template-columns: 2rem auto 5rem;\n    grid-template-rows: 2rem 2rem;\n    color: var(--text-color);\n}\n\n.task-entry button {\n    grid-area: 1/1/3/1;\n    border: none;\n    fill: var(--sub-color);\n    background-color: transparent;\n}\n\n.tag-group {\n    display: flex;\n    gap: 0.5rem;\n    margin-left: 1rem;\n}\n\nmain .icon {\n    border: none;\n    background-color: transparent;\n    font-size: 1rem;\n    font-weight: bold;\n    color: var(--text-color);\n    fill: var(--text-color);\n}\n\n\n/* task modal */\n.task-modal-wrapper {\n    position:fixed;\n    width: 100vw;\n    height: 100vh;\n    background-color: rgba(0,0,0,0.3);\n}\n\n.task-modal {\n    position: inherit;\n    --modal-width: 300px;\n    --modal-height: 300px;\n    width: var(--modal-width);\n    height: var(--modal-height);\n    bottom: calc(50% - var(--modal-height)/2);\n    right: calc(50% - var(--modal-width)/2);\n    background-color: var(--accent-color);\n    padding: 3rem;\n}\n\n.close {\n    position: absolute;\n    right: 0.5rem;\n    top: 0.5rem;\n    background-color: transparent;\n    border: none;\n    padding: 0;\n}\n\n.task-modal input, .task-modal textarea {\n    background-color: transparent;\n}\n\n"],sourceRoot:""}]);const i=A},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var A={};if(r)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(A[l]=!0)}for(var c=0;c<n.length;c++){var d=[].concat(n[c]);r&&A[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},A=[],i=0;i<n.length;i++){var l=n[i],c=r.base?l[0]+r.base:l[0],d=a[c]||0,s="".concat(c," ").concat(d);a[c]=d+1;var p=t(s),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var m=o(u,r);r.byIndex=i,e.splice(i,0,{identifier:s,updater:m,references:1})}A.push(s)}return A}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var A=0;A<a.length;A++){var i=t(a[A]);e[i].references--}for(var l=r(n,o),c=0;c<a.length;c++){var d=t(a[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=l}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},265:(n,e,t)=>{t.d(e,{Z:()=>r});const r=(()=>{function n(n){return document.querySelector(n)}return{setClick:function(e,t){n(e).addEventListener("click",t)},addEntryOfTemplate:function(e,t){const r=n(e).cloneNode(!0),o=n(t);return r.classList.remove("hidden"),o.appendChild(r),r},addTemporaryInput:function(e,t,r=""){const o=document.createElement("input"),a=n(e),A=n(t);if(a||A)return o.style+=r,a.classList.add("hidden"),A.appendChild(o),o.select(),console.log("Swapped out input."),o;console.log("Failed to find element or container")},swapInputWithText:function(e,t){const r=n(t);r.textContent=e.value,r.classList.remove("hidden"),e.remove()},elementExists:e=>null!=n(e)}})()},85:(n,e,t)=>{t.d(e,{Z:()=>r});const r={save:n=>{"object"==typeof n?(window.localStorage.setItem("data",JSON.stringify(n)),console.log("Saved data.")):console.warn("Cannot save data because target data isn't an Object")},updateVersion:(n,e)=>{const t=window.localStorage.data[e];t?n!=t||console.log(`Version is up to date. ${n}`):console.warn("Couldn't find reference to the version on local storage")},clear:()=>{window.localStorage.clear(),console.log("Cleared local data.")},hasExistingData:function(){return window.localStorage.data||!1},getData:function(){return JSON.parse(JSON.stringify(window.localStorage.data))||null}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),o=t.n(r),a=t(569),A=t.n(a),i=t(565),l=t.n(i),c=t(216),d=t.n(c),s=t(589),p=t.n(s),u=t(426),m={};m.styleTagTransform=p(),m.setAttributes=l(),m.insert=A().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),e()(u.Z,m),u.Z&&u.Z.locals&&u.Z.locals;var C=t(265),g=t(85);const I=function(){const n={version:"0.1.0",user:"Guest",tasks:[{title:"Add New Task",description:'Pressing "Add Task" at the bottom adds a new task.',deadline:"",priority:3}],tags:["Work","Hobby","Shopping"]};return{getData:()=>JSON.parse(JSON.stringify(n)),setData:e=>{n=e},update:function(n,e,t){t(this.data[n],e)}}}();g.Z.hasExistingData()&&(g.Z.updateVersion(I.getData().version,"version"),I.setData(g.Z.getData())),console.log(I.getData());const v=document.querySelector(".task-modal-wrapper");C.Z.setClick("button.close",(()=>{v.classList.add("hidden")})),C.Z.setClick(".task-entry",(()=>{v.classList.remove("hidden")})),C.Z.setClick("main button.add",(()=>{C.Z.addEntryOfTemplate(".task-list div:first-child",".task-list"),v.classList.remove("hidden")})),C.Z.setClick("button.data-clear",(()=>{g.Z.clear()})),C.Z.setClick(".tag-add",(()=>{C.Z.elementExists("li input")?console.log("Cannot add tag since input is currently prompted"):(new Promise((n=>{C.Z.addEntryOfTemplate("nav ul.tag-list li","nav ul.tag-list"),n("OK")})).then((n=>{const e=C.Z.addTemporaryInput("nav li:last-child .tag p","nav li:last-child .tag");e.addEventListener("change",(()=>{C.Z.swapInputWithText(e,"nav li:last-child .tag p")}))})),console.log("Disable adding tag until this is done"))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,