(()=>{"use strict";var e={85:(e,o,t)=>{t.d(o,{Z:()=>a});const a=(()=>{function e(){return JSON.parse(window.localStorage.data)||null}return{save:e=>{"object"==typeof e?(window.localStorage.setItem("data",JSON.stringify(e)),console.log("Saved data.")):console.warn("Cannot save data because target data isn't an Object")},updateVersion:(o,t)=>{const a=e()[t];a?o!=a||console.log(`Version is up to date. ${o}`):console.warn("Couldn't find reference to the version on local storage")},clear:()=>{window.localStorage.clear(),console.log("Cleared local data.")},hasExistingData:function(){return window.localStorage.data||!1},getDataCopy:e}})()}},o={};function t(a){var r=o[a];if(void 0!==r)return r.exports;var n=o[a]={exports:{}};return e[a](n,n.exports,t),n.exports}t.d=(e,o)=>{for(var a in o)t.o(o,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:o[a]})},t.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),t(85)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kZWwuYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJ3REFJQSxNQWtFQSxFQWxFeUIsTUFHckIsU0FBU0EsSUFBZ0IsT0FBT0MsS0FBS0MsTUFBTUMsT0FBT0MsYUFBYUMsT0FBUyxJQUFNLENBMkQ5RSxNQUFPLENBQUNDLEtBVE1DLElBQ2UsaUJBQWRBLEdBSVhKLE9BQU9DLGFBQWFJLFFBQVEsT0FBUVAsS0FBS1EsVUFBVUYsSUFDbkRHLFFBQVFDLElBQUksZ0JBSlJELFFBQVFFLEtBQUssdURBSVMsRUFHaEJDLGNBN0JRLENBQUNDLEVBQWdCQyxLQUNuQyxNQUFNQyxFQUFnQmhCLElBQWNlLEdBQy9CQyxFQUlJRixHQUFrQkUsR0FDdkJOLFFBQVFDLElBQUksMEJBQTBCRyxLQUp0Q0osUUFBUUUsS0FBSywwREFNakIsRUFvQnlCSyxNQWZmLEtBQ1ZkLE9BQU9DLGFBQWFhLFFBQ3BCUCxRQUFRQyxJQUFJLHNCQUFxQixFQWFETyxnQkE1RHBDLFdBQTZCLE9BQU9mLE9BQU9DLGFBQWFDLE9BQVEsQ0FBTyxFQTREbEJMLGNBRXhELEVBaEV3QixFLEdDSHJCbUIsRUFBMkIsQ0FBQyxFQUdoQyxTQUFTQyxFQUFvQkMsR0FFNUIsSUFBSUMsRUFBZUgsRUFBeUJFLEdBQzVDLFFBQXFCRSxJQUFqQkQsRUFDSCxPQUFPQSxFQUFhRSxRQUdyQixJQUFJQyxFQUFTTixFQUF5QkUsR0FBWSxDQUdqREcsUUFBUyxDQUFDLEdBT1gsT0FIQUUsRUFBb0JMLEdBQVVJLEVBQVFBLEVBQU9ELFFBQVNKLEdBRy9DSyxFQUFPRCxPQUNmLENDckJBSixFQUFvQk8sRUFBSSxDQUFDSCxFQUFTSSxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hSLEVBQW9CVSxFQUFFRixFQUFZQyxLQUFTVCxFQUFvQlUsRUFBRU4sRUFBU0ssSUFDNUVFLE9BQU9DLGVBQWVSLEVBQVNLLEVBQUssQ0FBRUksWUFBWSxFQUFNQyxJQUFLTixFQUFXQyxJQUUxRSxFQ05EVCxFQUFvQlUsRUFBSSxDQUFDSyxFQUFLQyxJQUFVTCxPQUFPTSxVQUFVQyxlQUFlQyxLQUFLSixFQUFLQyxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG8tZG8vLi9zcmMvbG9jYWxEYXRhSGFuZGxlci5qcyIsIndlYnBhY2s6Ly90by1kby93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90by1kby93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdG8tZG8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuTW9kdWxlIGZvciBoYW5kbGluZyBvcGVyYXRpb25zIGZvciBsb2NhbCBzdG9yYWdlIGRhdGFcbkhhbmRsZXMgcmV0cmlldmluZyBhbmQgc2F2aW5nIGRhdGEgZnJvbSBsb2NhbCBzdG9yYWdlLiBcbiovXG5jb25zdCBsb2NhbERhdGFIYW5kbGVyID0gKCgpPT57XG4gICAgXG4gICAgZnVuY3Rpb24gaGFzRXhpc3RpbmdEYXRhKCkgeyByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZS5kYXRhIHx8IGZhbHNlOyB9XG4gICAgZnVuY3Rpb24gZ2V0RGF0YUNvcHkoKSB7IHJldHVybiBKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZGF0YSkgfHwgbnVsbDsgfVxuXG4gICAgLy8gQ2hlY2tzIGlmIGxvY2FsIHN0b3JhZ2UgY2FuIGJlIHVzZWRcbiAgICBmdW5jdGlvbiBzdG9yYWdlQXZhaWxhYmxlKHR5cGUpIHtcbiAgICAgICAgbGV0IHN0b3JhZ2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdG9yYWdlID0gd2luZG93W3R5cGVdO1xuICAgICAgICAgICAgY29uc3QgeCA9ICdfX3N0b3JhZ2VfdGVzdF9fJztcbiAgICAgICAgICAgIHN0b3JhZ2Uuc2V0SXRlbSh4LCB4KTtcbiAgICAgICAgICAgIHN0b3JhZ2UucmVtb3ZlSXRlbSh4KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZSBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbiAmJiAoXG4gICAgICAgICAgICAgICAgLy8gZXZlcnl0aGluZyBleGNlcHQgRmlyZWZveFxuICAgICAgICAgICAgICAgIGUuY29kZSA9PT0gMjIgfHxcbiAgICAgICAgICAgICAgICAvLyBGaXJlZm94XG4gICAgICAgICAgICAgICAgZS5jb2RlID09PSAxMDE0IHx8XG4gICAgICAgICAgICAgICAgLy8gdGVzdCBuYW1lIGZpZWxkIHRvbywgYmVjYXVzZSBjb2RlIG1pZ2h0IG5vdCBiZSBwcmVzZW50XG4gICAgICAgICAgICAgICAgLy8gZXZlcnl0aGluZyBleGNlcHQgRmlyZWZveFxuICAgICAgICAgICAgICAgIGUubmFtZSA9PT0gJ1F1b3RhRXhjZWVkZWRFcnJvcicgfHxcbiAgICAgICAgICAgICAgICAvLyBGaXJlZm94XG4gICAgICAgICAgICAgICAgZS5uYW1lID09PSAnTlNfRVJST1JfRE9NX1FVT1RBX1JFQUNIRUQnKSAmJlxuICAgICAgICAgICAgICAgIC8vIGFja25vd2xlZGdlIFF1b3RhRXhjZWVkZWRFcnJvciBvbmx5IGlmIHRoZXJlJ3Mgc29tZXRoaW5nIGFscmVhZHkgc3RvcmVkXG4gICAgICAgICAgICAgICAgKHN0b3JhZ2UgJiYgc3RvcmFnZS5sZW5ndGggIT09IDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVXBkYXRlcyB0aGUgc3RvcmVkIGRhdGEgZm9ybWF0IHRvIGN1cnJlbnQgZGF0YSBmb3JtYXRcbiAgICAvLyBTYXZlIHVwZGF0ZWQgZGF0YSBmb3JtYXQgdG8gdGhlIGxvY2FsIHN0b3JhZ2VcbiAgICBjb25zdCB1cGRhdGVWZXJzaW9uID0gKGN1cnJlbnRWZXJzaW9uLCB2ZXJzaW9uUHJvcGVydHkpID0+IHtcbiAgICAgICAgY29uc3Qgc3RvcmVkVmVyc2lvbiA9IGdldERhdGFDb3B5KClbdmVyc2lvblByb3BlcnR5XTtcbiAgICAgICAgaWYgKCFzdG9yZWRWZXJzaW9uKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJDb3VsZG4ndCBmaW5kIHJlZmVyZW5jZSB0byB0aGUgdmVyc2lvbiBvbiBsb2NhbCBzdG9yYWdlXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGN1cnJlbnRWZXJzaW9uID09IHN0b3JlZFZlcnNpb24pIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBWZXJzaW9uIGlzIHVwIHRvIGRhdGUuICR7Y3VycmVudFZlcnNpb259YCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ29udmVydCBhbnkgb2xkIGRhdGEgZm9ybWF0IHRvIG5ldyBmb3JtYXQgaGVyZVxuICAgIH1cblxuICAgIC8vIFJlc2V0IGRhdGEgc2Vzc2lvbiBhbmQgbG9jYWxseVxuICAgIGNvbnN0IGNsZWFyID0gKCkgPT4ge1xuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLmNsZWFyKCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiQ2xlYXJlZCBsb2NhbCBkYXRhLlwiKVxuICAgIH07XG5cbiAgICAvLyBTYXZlIGdpdmVuIGRhdGEgb2JqZWN0IGludG8gbG9jYWwgc3RvcmFnZVxuICAgIGNvbnN0IHNhdmUgPSAodGFyZ2V0RGF0YSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldERhdGEgIT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQ2Fubm90IHNhdmUgZGF0YSBiZWNhdXNlIHRhcmdldCBkYXRhIGlzbid0IGFuIE9iamVjdFwiKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZGF0YScsIEpTT04uc3RyaW5naWZ5KHRhcmdldERhdGEpKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJTYXZlZCBkYXRhLlwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge3NhdmUsIHVwZGF0ZVZlcnNpb24sIGNsZWFyLCBoYXNFeGlzdGluZ0RhdGEsIGdldERhdGFDb3B5fTtcblxufSkoKTtcblxuZXhwb3J0IGRlZmF1bHQgbG9jYWxEYXRhSGFuZGxlcjsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSJdLCJuYW1lcyI6WyJnZXREYXRhQ29weSIsIkpTT04iLCJwYXJzZSIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsImRhdGEiLCJzYXZlIiwidGFyZ2V0RGF0YSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJjb25zb2xlIiwibG9nIiwid2FybiIsInVwZGF0ZVZlcnNpb24iLCJjdXJyZW50VmVyc2lvbiIsInZlcnNpb25Qcm9wZXJ0eSIsInN0b3JlZFZlcnNpb24iLCJjbGVhciIsImhhc0V4aXN0aW5nRGF0YSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJrZXkiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=